<?xml version="1.0" encoding="ISO-8859-1"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns="http://sourceforge.net/projects/firemox"
	targetNamespace="http://sourceforge.net/projects/firemox" elementFormDefault="qualified"
	version="0.95-SNAPSHOT">
	<!-- 
		*	 Firemox is a turn based strategy simulator
		*	 Copyright (C) 2003-2007 Fabrice Daugan and contributors
		*
		*	 This program is frée software; you can redistribute it and/or modify it 
		* under the terms of the GNU General Public License as published by the Frée 
		* Software Foundation; either version 2 of the License, or (at your option) any
		* later version.
		*
		*	 This program is distributed in the hope that it will be useful, but WITHOUT
		* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
		* FOR A PARTICULAR PURPOSE.	Sée the GNU General Public License for more 
		* details.
		*
		*	 You should have received a copy of the GNU General Public License along	
		* with this program; if not, write to the Frée Software Foundation, Inc., 
		* 59 Temple Place, Suite 330, Boston, MA	02111-1307	USA
		*
		* XML Schema for Firemox XML card and XML turn based strategy rules 
		* definition.
		*
		* @author Fabrice Daugan
	-->
	<xsd:annotation>
		<xsd:documentation xml:lang="en">
			MP card and ability schema for Firemox.
		</xsd:documentation>
		<xsd:documentation xml:lang="fr">
			Schema pour carte, capacité, et regle pour Firemox.
		</xsd:documentation>
	</xsd:annotation>
	<xsd:element name="card">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Card rules and attributes definitions. Each card contains one or more abilities and
				has a name. Initial state of a card is defined in the 'init' element.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				règles et attributs de la carte. Chaque carte contient une ou plusieurs capacités,
				un nom et un element 'init' qui contient les champs a initialiser.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="text" type="xsd:string" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="fr">
							Le texte d'ambiance associe a cette carte.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="revision" type="xsd:positiveInteger" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The revision information of this card, version number, date,...
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Les informations concernant la version de cette carte, numéro de
							version, date...
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element ref="actions" minOccurs="0" />
				<xsd:element name="rules-author-comment" type="xsd:string" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The author's name of rules of this card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Le nom de l'auteur des règles de cette carte.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="keywords" type="xsd:string" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The keyword list attached to this card. The keywords may be used by some
							tests like 'has-keyword'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							La liste de mots clés attachés à cette carte. Les mots clés peuvent être
							interprétés par des tests comme 'has-keyword'.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element ref="init" minOccurs="0"/>
				<xsd:element ref="abilities" minOccurs="0" />
				<xsd:element name="modifiers" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of static register, property, color and card type modifiers of this
							card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des modifieurs statics de registre/couleur/type/proprieté de cette
							carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="modifierGrp" minOccurs="0" maxOccurs="unbounded" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="attachment" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Attachment modifiers supplied by this card, and added to attached to
							component. An attachment still valid while the specified attachement
							condition is true.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Modifiers apportés par cette carte, et ajoutés au composant attaché. Un
							attachement reste valide tant que la condition d'attachement spécifiée
							reste vraie.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="modifiers" minOccurs="0">
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										Modifiers brought by this attachment.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Modifiers apportés par cet attachment.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:group ref="modifierGrp" minOccurs="0"
										maxOccurs="unbounded" />
								</xsd:complexType>
							</xsd:element>
							<xsd:element name="valid-target" type="testType" minOccurs="0" />
							<xsd:element name="valid-attachment" type="testType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="ref" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
			</xsd:all>
			<xsd:attribute name="name" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="actions">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Local declaration of one action</xsd:documentation>
			<xsd:documentation xml:lang="fr">Declaration locale d'une action</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="action" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="actionListGrp" minOccurs="0" maxOccurs="unbounded" />
						</xsd:sequence>
						<xsd:attribute name="reference-name" type="xsd:string" use="required" />
						<xsd:attribute name="macro" type="xsd:boolean" />
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<!-- TBS means : Turn Based Strategy game -->
	<!-- TBS signifie : Turn Based Strategy game, Jeu base sur le tour a tour -->
	<xsd:element name="tbs">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Turn Based Strategy configuration element.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Element correspondant a la configuration d'un Turn Based Strategy.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="database-properties">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Available database properties.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des propriétés disponibles dans la base de données.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="property" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence />
									<xsd:attribute name="name" type="xsd:string" use="required" />
									<xsd:attribute name="translate" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="type" type="xsd:string"
										default="java.lang.String" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="mana-symbols">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Contains the URLs of used manas.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Conteint les URL des manas utilises.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="colored">
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										Contains the URLs of used colored manas.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Conteint les URL des manas colores utilises.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="mana" minOccurs="0" maxOccurs="5">
											<xsd:complexType>
												<xsd:attribute name="name" type="colorEnum"
													use="required" />
												<xsd:attribute name="picture" type="xsd:string"
													use="required" />
												<xsd:attribute name="big-picture" type="xsd:string"
													use="required" />
											</xsd:complexType>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="url" type="xsd:string" use="required" />
									<xsd:attribute name="big-url" type="xsd:string" use="required" />
								</xsd:complexType>
							</xsd:element>
							<xsd:element name="colorless">
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										Contains the URLs of used colorless manas.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Conteint les URL des manas incolores utilisés.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="mana" maxOccurs="unbounded">
											<xsd:complexType>
												<xsd:attribute name="amount" type="xsd:integer"
													use="required" />
												<xsd:attribute name="picture" type="xsd:string"
													use="required" />
											</xsd:complexType>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="url" type="xsd:string" use="required" />
									<xsd:attribute name="unknown" type="xsd:string" use="required" />
									<xsd:attribute name="big-url" type="xsd:string" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="licence" type="xsd:string" />
				<xsd:element name="registers-first-player" type="setPlayerRegisterType">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Set the initial registers of first player
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Positionne les registres du premier joueur.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="static-modifiers">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of static register, property, color, card type,... modifiers of
							this game.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des modifieurs statiques de registre/couleur/type/propriété/.. de ce
							jeu.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="static-modifier" minOccurs="0" maxOccurs="unbounded" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="registers-second-player" type="setPlayerRegisterType">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Set the initial registers of second player
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Positionne les registres du deuxieme joueur.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="phases">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of TBS's phases. The 'start' attribute is the index of first phase
							for first turn.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des phases du TBS. L'attribut 'start' correspond a l'index de la
							première phase du premier tour.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="phase" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										Definition of one phase : name and type.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Definition d'une phase : nom et type.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:attribute name="name" type="xsd:string" use="required" />
									<xsd:attribute name="playable-empty-stack-you"
										type="addIdCardType" use="required" />
									<xsd:attribute name="playable-middle-resolution-you"
										type="addIdCardType" use="required" />
									<xsd:attribute name="playable-empty-stack-opponent"
										type="addIdCardType" use="required" />
									<xsd:attribute name="playable-middle-resolution-opponent"
										type="addIdCardType" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="start" type="xsd:unsignedByte" use="required" />
						<xsd:attribute name="turn-structure" use="required">
							<xsd:simpleType>
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										To add card id to this card.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Pour ajouter des identifiant de carte à cette carte.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:restriction base="phaseList">
									<xsd:minLength value="1" />
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="tooltip-filters" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of filters to apply on card to customize the tooltip. When the
							filter is verified, the fields with 'true' value are displayed.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des filtres à appliquer aux cartes pour personnaliser l'info
							bulle. Quand le filtre est verifié, les champs avec la valeur 'true'
							sont affichés.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="tooltip-filter" minOccurs="0"
								maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="filter" type="testType">
											<xsd:annotation>
												<xsd:documentation xml:lang="en">
													The filter to use.
												</xsd:documentation>
												<xsd:documentation xml:lang="fr">
													Le filtre à utiliser.
												</xsd:documentation>
											</xsd:annotation>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="powerANDtoughness" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="damage" type="xsd:boolean" default="false" />
									<xsd:attribute name="types" type="xsd:boolean" default="false" />
									<xsd:attribute name="properties" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="colors" type="xsd:boolean" default="false" />
									<xsd:attribute name="states" type="xsd:boolean" default="false" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="abilities">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of TBS's abilities.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste de capacités du TBS.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="system-ability" minOccurs="0" maxOccurs="unbounded" />
							<xsd:element ref="replacement-ability" minOccurs="0"
								maxOccurs="unbounded" />
						</xsd:sequence>
						<xsd:attribute name="abortionzone" type="zoneEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element ref="references" minOccurs="1" maxOccurs="1" />
				<xsd:element name="layouts">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of activated layout for cards.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des gestionnaires de placements de cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="common-panel">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="card-details">
											<xsd:complexType>
												<xsd:sequence>
													<xsd:element name="properties">
														<xsd:complexType>
															<xsd:sequence>
																<xsd:element name="menu-element"
																	maxOccurs="unbounded">
																	<xsd:complexType>
																		<xsd:sequence>
																			<xsd:element
																				name="menu-attribute" minOccurs="0" maxOccurs="unbounded">
																				<xsd:complexType>
																					<xsd:sequence />
																					<xsd:attribute
																						name="name" type="xsd:string" use="required" />
																					<xsd:attribute
																						name="value" type="xsd:string" use="required" />
																					<xsd:attribute
																						name="type" use="required">
																						<xsd:simpleType>
																							<xsd:restriction
																								base="xsd:string">
																								<xsd:enumeration
																									value="string" />
																								<xsd:enumeration
																									value="text" />
																								<xsd:enumeration
																									value="link" />
																							</xsd:restriction>
																						</xsd:simpleType>
																					</xsd:attribute>
																				</xsd:complexType>
																			</xsd:element>
																		</xsd:sequence>
																		<xsd:attribute name="name"
																			type="xsd:string" use="required" />
																	</xsd:complexType>
																</xsd:element>
															</xsd:sequence>
														</xsd:complexType>
													</xsd:element>
												</xsd:sequence>
											</xsd:complexType>
										</xsd:element>
									</xsd:sequence>
								</xsd:complexType>
							</xsd:element>
							<xsd:element name="zones">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="play">
											<xsd:complexType>
												<xsd:sequence>
													<xsd:element name="sector" minOccurs="1"
														maxOccurs="unbounded">
														<xsd:complexType>
															<xsd:complexContent>
																<xsd:extension base="testType">
																	<xsd:attribute name="constraint"
																		type="xsd:string" />
																</xsd:extension>
															</xsd:complexContent>
														</xsd:complexType>
													</xsd:element>
												</xsd:sequence>
											</xsd:complexType>
										</xsd:element>
										<xsd:element name="additional-zones">
											<xsd:complexType>
												<xsd:sequence>
													<xsd:element name="additional-zone"
														minOccurs="0" maxOccurs="unbounded">
														<xsd:complexType>
															<xsd:attribute name="layout-class"
																default="null" type="xsd:string" />
															<xsd:attribute name="name"
																type="xsd:string" use="required" />
															<xsd:attribute name="constraint-you"
																type="xsd:string" />
															<xsd:attribute
																name="constraint-opponent" type="xsd:string" />
														</xsd:complexType>
													</xsd:element>
												</xsd:sequence>
											</xsd:complexType>
										</xsd:element>
									</xsd:sequence>
									<xsd:attribute name="enable-stack" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="enable-dbz" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="enable-tbz" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="enable-play" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="enable-hand" type="xsd:boolean"
										default="false" />
									<xsd:attribute name="default-zone" type="xsd:string"
										use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:all>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="action-constraints" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of constraints to apply on abilities containing an action. These
							constraints are appended to the existing test determining constraints
							allowing the ability to be played/triggered.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des contraintes a appliquer aux capacité contenat une action. Ces
							contraintes sont ajoutées au test existant determinant les contraintes
							autorisant la capacité a être jouée/activée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence minOccurs="0" maxOccurs="unbounded">
							<xsd:element name="constraint">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element ref="test" />
										<xsd:element name="actions" type="actionListType"
											minOccurs="0" />
									</xsd:sequence>
									<xsd:attribute name="operation" use="required">
										<xsd:simpleType>
											<xsd:restriction base="xsd:string">
												<xsd:enumeration value="and" />
												<xsd:enumeration value="or" />
											</xsd:restriction>
										</xsd:simpleType>
									</xsd:attribute>
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="additional-costs" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of additional costs applied when a spell/ability is on the stack.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des coûts additionnel appliqués lorsque un sort/capacité est dans
							la pile.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence minOccurs="0" maxOccurs="unbounded">
							<xsd:element name="additional-cost">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element ref="test" />
										<xsd:element name="cost" type="actionListType"
											minOccurs="0" />
									</xsd:sequence>
									<xsd:attribute name="name" type="xsd:string" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="objects" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of static objects of this card / game.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des objets statiques de cette carte / jeu.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="object" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence minOccurs="0" maxOccurs="unbounded">
										<xsd:group ref="modifierGrp" />
									</xsd:sequence>
									<xsd:attribute name="name" type="xsd:string" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element ref="deck-constraints" minOccurs="1" maxOccurs="1" />
				<xsd:element name="state-pictures" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of state-pictures of TBS
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste de state-pictures du TBS
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="state-picture" maxOccurs="unbounded">
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										A state picture for cards/players.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Une image d'etat pour les cartes/joueurs.
									</xsd:documentation>
								</xsd:annotation>
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="display-test" type="testType"
											minOccurs="0" />
									</xsd:sequence>
									<xsd:attribute name="name" type="xsd:string" use="required" />
									<xsd:attribute name="picture" type="xsd:string" use="required" />
									<xsd:attribute name="state" type="xsd:string" use="required" />
									<xsd:attribute name="index" type="registerIndex" use="required" />
									<xsd:attribute name="x" type="xsd:short" use="required" />
									<xsd:attribute name="y" type="xsd:short" use="required" />
									<xsd:attribute name="width" type="xsd:short" use="required" />
									<xsd:attribute name="height" type="xsd:short" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="action-pictures" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							List of actions where picture would be used instead of text.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Liste des actions pour lesquelles des images seront utilisée a la place
							du texte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="action" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence />
									<xsd:attribute name="name" type="xsd:string" use="required" />
									<xsd:attribute name="picture" type="xsd:string" use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="url" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element ref="aliases" />
			</xsd:all>
			<xsd:attribute name="name" type="xsd:string" use="required" />
			<xsd:attribute name="version" type="xsd:string" use="required" />
			<xsd:attribute name="author" type="xsd:string" use="required" />
			<xsd:attribute name="comment" type="xsd:string" use="required" />
			<xsd:attribute name="art-url" type="xsd:string" />
			<xsd:attribute name="back-picture" type="xsd:string" />
			<xsd:attribute name="damage-picture" type="xsd:string" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="init">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				In this element you can set the colors, idcards and initial register values.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Dans cet element vous pouvez assigner les couleurs, idcards et les registres de
				cette carte.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="colors" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To add colors to this card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour ajouter des couleurs a cette carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:list itemType="colorEnum" />
					</xsd:simpleType>
				</xsd:element>
				<xsd:element name="properties" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To add properties to this card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour ajouter des propriétés a cette carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:simpleType>
						<xsd:list itemType="propertyEnum" />
					</xsd:simpleType>
				</xsd:element>
				<xsd:element name="idcards" type="addIdCardType">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To add card identifiants to this card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour ajouter des identifiants de carte a cette carte.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="registers" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To set any initial registers of the card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour posionner un certain nombre de registres initiaux de la carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="register" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:choice>
										<xsd:element name="value" type="valueType" minOccurs="0" />
									</xsd:choice>
									<xsd:attribute name="index" type="cardRegisterIndex"
										use="required" />
									<xsd:attribute name="value" type="registerValue" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</xsd:all>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="abilities" type="abilitiesType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">List of abilities of this card.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Liste des capacités de cette carte.</xsd:documentation>
		</xsd:annotation>
	</xsd:element>
	<xsd:complexType name="abilitiesType">
		<xsd:sequence>
			<xsd:choice minOccurs="0" maxOccurs="unbounded">
				<xsd:element ref="triggered-ability" />
				<xsd:element ref="activated-ability" />
				<xsd:element ref="replacement-ability" />
				<xsd:element ref="ability" />
			</xsd:choice>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="while">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Test conditionning the activation of this modifier. When this test return true, this
				modifier is skipped.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Test conditionnant l'activation de ce modifieur. Lorsque ce test n'est pas vrai, ce
				modifieur n'est pas utilise.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:group ref="testTypeGrp" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="until">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				List of events destroying this modifier.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Liste des enements qui proque la destruction de ce modifieur.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:group ref="triggeredEventGrp" minOccurs="0" maxOccurs="unbounded" />
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="registers">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				To set any initial registers of modifier.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Pour positionner un certain nombre de registres initiaux du modifieur.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="register" minOccurs="0" maxOccurs="unbounded">
					<xsd:complexType>
						<xsd:choice>
							<xsd:element name="value" type="valueType" minOccurs="0" />
						</xsd:choice>
						<xsd:attribute name="index" type="modifierRegisterIndex" use="required" />
						<xsd:attribute name="value" type="registerValue" />
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:element>
	<xsd:group name="modifierGrp">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				A register, color, property and card type modifier for a card.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Un modifieur de registre/couleur/type/propriété pour une carte.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="additional-cost-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							An additional-cost modifier activated in the stack zone.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifier de coût additionnel activé dans la zone de pile.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierValueType">
								<xsd:sequence>
									<xsd:element ref="test" />
									<xsd:element name="cost" type="actionListType" minOccurs="0" />
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>

				<xsd:element ref="static-modifier" />
				<xsd:element name="register-indirection">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A register indirection changes a register prior to any
							register-modifier. Usefull to set the initial value of a register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un remplacement de valeur de registre modifie un registre avant tout
							autre register-modifier. Utile pour changer la valeur initiale d'un
							registre.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierValueType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="index" type="registerIndex" />
								<xsd:attribute name="value" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>

				<xsd:element name="register-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A register modifier. The 'linked' attribute indicates if this modifier
							dies with it's creator.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur de registre. L'attribut 'linked' indique si ce modifier
							meurt avec son createur.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierValueType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="index" type="registerIndex" />
								<xsd:attribute name="value" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="controller-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A controller modifier changes the controller of the attached component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur de contrôleur change le controller du composant attaché.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierType">
								<xsd:attribute name="player" type="playerEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="playable-zone-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A zone modifier to make playable many abilities from several zone.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur de zone pour rendre certaines capacités jouables dans
							plusieurs zones.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierType">
								<xsd:attribute name="zone" type="zoneEnum" use="required" />
								<xsd:attribute name="lose" type="xsd:boolean" default="false" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="color-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A color modifier changes the colors of the attached component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur de couleur change les couleurs du composant attaché.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierValueType">
								<xsd:sequence>
									<xsd:element name="color" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="color" type="colorEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="idcard-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A card identifiant modifier changes the card types of the attached
							component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur d'identifiant change les types de cartes du composant
							attaché.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierValueType">
								<xsd:sequence>
									<xsd:element name="idcard" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="idcard" type="idCardEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="property-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A property modifier changes the presence of a given property in the
							attached component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur de proprieté change la présence d'une propriété donnée du
							composant attaché.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierType">
								<xsd:sequence>
									<xsd:element name="property" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="live-update" type="xsd:boolean" default="true" />
								<xsd:attribute name="property" type="propertyEnum" />
								<xsd:attribute name="operation" type="propertyOperationEnum"
									default="add" />
								<xsd:attribute name="activation-zone" type="xsd:string" default="play" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="ability-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							An ability modifier changes the available abilities of the attached
							component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Un modifieur de capacité change la liste de capacités disponibles du
							composant attaché.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="modifierType">
								<xsd:sequence>
									<xsd:element ref="abilities" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="ref" type="xsd:string" />
								<xsd:attribute name="operation" type="operationAbilityModifierEnum"
									default="add" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							An object référence. An object is a modifier declared un the tbs xml
							file
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Une référence vers un objet. Un objet est un modifieur nomme et declare
							dans le fichier xml du tbs.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>
	<xsd:element name="static-modifier">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				A static modifier apply a modifier to all objects filtered by a specified test for a
				specific zone. The 'filter-zone' attribute of this static modifier
				corresponds to the zone in this modifier can interact.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Un modifieur statique applique un modifieur à touts les objets filtrés par un test,
				et se trouvant dans une certaine zone. L'attribut 'filter-zone' correspond 
				à la zone où ce modifier sera appliqué.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element ref="registers" minOccurs="0" />
				<xsd:element name="modifiers">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="modifierGrp" maxOccurs="unbounded" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element ref="while" minOccurs="0" />
				<xsd:element ref="until" minOccurs="0" />
			</xsd:sequence>
			<xsd:attribute name="filter-zone" type="zoneEnum" default="play" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="triggered-ability">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				This ability can contain a 'cost' and a 'effects' element. These elements are
				respectively list of actions corresponding to cost part, and list of actions
				corresponding to effect part. Between these steps, the 'canicast' event is generated
				if the resolution mode is 'normal'.To be activable, this ability must be in a card
				placed in a certain zone to be specified. This ability can be activated by only one
				event or when the 'when' condition is true. When this is the looked for event, the
				specified test must be true. If the resolution is not 'hidden', the 'picture'
				attribute (if specified) is used to determine the picture to use to represent
				ability in the stack.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Cette capacité peut contenir un élément 'cost' et un élément 'effects' qui sont des
				listes d'actions correspondantes respectivement à la liste des actions jouées en
				tant que coût, et en tant qu'effets. Entre ces deux parties, l'événement 'canicast'
				est généré si la résolution vaut 'normal'. Pour être activable, une capacité doit
				être contenue dans une carte se trouvant dans une zone définie. Cette capacité ne
				peut être activée que par un événement ou lorsque la condition 'when' est vraie.
				Quand il s'agit de l'événement attendu, le test specifié est interprété et doit être
				vrai. Si le mode de résolution n'est pas 'hidden', l'attribut 'picture' sera utilisé
				pour représenter la capacité dans la pile.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:choice>
					<xsd:element name="when" type="testType" maxOccurs="1" />
					<xsd:group ref="triggeredEventGrp" />
				</xsd:choice>
				<xsd:element name="cost" type="actionListType" minOccurs="0" />
				<xsd:element name="effects" type="actionListType" minOccurs="0" />
			</xsd:sequence>
			<xsd:attribute name="name" type="xsd:string" />
			<xsd:attribute name="resolution" type="resolutionEnum" default="normal" />
			<xsd:attribute name="zone" type="zoneEnum" use="required" />
			<xsd:attribute name="optimize" type="optimizeEnum" default="none" />
			<xsd:attribute name="picture" type="xsd:string" />
			<xsd:attribute name="reference-name" type="xsd:string" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="replacement-ability">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				This ability can contain an 'effects' element corresponding to effect part. To be
				activable, this ability must be in a card placed in a certain zone to be specified.
				This ability can be activated by only one event. When this is the looked for event,
				the specified test must be true. The 'layer' attribute indicates the priority of
				this replacement.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Cette capacité peut contenir un élément 'effects' qui est une liste d'actions
				effets. Cette capacité ne peut être activée que par un événement. Quand il s'agit de
				l'événement attendu, le test specifié est verifié et doit être vrai. L'attribut
				'layer' indique la priorité de ce remplacement.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:group ref="triggeredEventGrp" />
				<xsd:element name="effects" type="actionListType" minOccurs="0" />
			</xsd:sequence>
			<xsd:attribute name="name" type="xsd:string" />
			<xsd:attribute name="zone" type="zoneEnum" use="required" />
			<xsd:attribute name="layer" default="2">
				<xsd:simpleType>
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Layer values. 0 is the higher replacement priority. 4 is the lower
							replacement priority.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Valeurs des couches. 0 est la plus grande priorité de remplacement. 4
							est la plus basse priorité de remplacement.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:restriction base="xsd:short">
						<xsd:minInclusive value="0" />
						<xsd:maxInclusive value="4" />
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="optimize" default="first">
				<xsd:simpleType>
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Possible optimizations for abilities management in the TBZ. For the
							'none' option, no optimization is done. For the 'unique' option, the
							ability wont be added if it already exists in the TBZ. For the 'follow'
							option, an ability is not added in the TBZ if the last ability is the
							same. 'event', same ability is added only once per ability triggering
							this event. For 'choice', ability is added to the TBZ but during the
							resolution a prompt will ask to controller only one ability to be added
							to the stack.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Optimisations possibles pour la gestion des capacités dans la TBZ. Pour
							l'option 'none', aucune optimisation n'est faîte. Pour l'option
							'unique', une capacité ne sera pas ajoute dans la TBZ si elle existe
							déjà dans la TBZ. Pour l'option 'follow', une capacité ne sera pas
							ajoutée dans la TBZ si la dernière capacité est la même.'event', une
							même capacité est ajoutée seulement une fois par capacité declenchant
							cet événement. Pour 'choice', la capacité est ajoutée a la TBZ mais
							durant la résolution un prompt demandera au contrôleur une seule
							capacité a ajouter a la pile.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="first" />
						<xsd:enumeration value="action" />
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="reference-name" type="xsd:string" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="activated-ability">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				This ability can contain a 'cost' and a 'effects' element. These elements are
				respectivly list of actions corresponding to cost part, and list of actions
				corresponding to effect part. Between these steps, the 'canicast' event is generated
				if the resolution mode is 'normal'.To be activable, this ability must be in a card
				placed in a certain zone to be specified. This ability can only be activated by the
				'canicast' event. When this is the looked for event, the specified test must be
				true. If the resolution is not 'hidden', the 'picture' attribute (if specified) is
				to indicate to the player, the friendly name of this ability, mais is not used to
				determine the picture to use to represent ability in the stack.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Cette capacité peut contenir un element 'cost' et un element 'effects' qui sont des
				listes d'actions correspondant respectivement à la liste des actions jouées en tant
				que coût, et en tant qu'effets. Entre ces deux parties l'événement 'canicast' est
				généré si la résolution vaut 'normal'. Pour être activable, une capacité doit être
				contenue dans une carte se trouvant dans une zone définie. Cette capacité ne peut
				être activée que par l'événement 'canicast'. Quand il s'agit de l'événement attendu,
				le test specifié est vérifié et doit être vrai. Si le mode de resolution n'est pas
				'hidden'. l'attribut 'picture' sera utilise pour indiquer au joueur le nom de cette
				capacité, mais pas pour représenter la capacité dans la pile.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element ref="test" minOccurs="0" />
				<xsd:element name="cost" type="actionListType" minOccurs="0" />
				<xsd:element name="effects" type="actionListType" minOccurs="0" />
			</xsd:all>
			<xsd:attribute name="play-as-spell" default="auto">
				<xsd:simpleType>
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Operations types.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Types d'operations.</xsd:documentation>
					</xsd:annotation>
					<xsd:restriction base="xsd:string">
						<xsd:enumeration value="auto" />
						<xsd:enumeration value="true" />
						<xsd:enumeration value="false" />
					</xsd:restriction>
				</xsd:simpleType>
			</xsd:attribute>
			<xsd:attribute name="playable" type="idCardEnum" use="required" />
			<xsd:attribute name="controller" type="playerEnum" />
			<xsd:attribute name="name" type="xsd:string" />
			<xsd:attribute name="resolution" type="resolutionEnum" default="normal" />
			<xsd:attribute name="zone" type="zoneEnum" use="required" />
			<xsd:attribute name="optimize" type="optimizeEnum" default="none" />
			<xsd:attribute name="picture" type="xsd:string" />
			<xsd:attribute name="reference-name" type="xsd:string" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="ability">
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="actions" type="actionListType" minOccurs="0"
					maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Actions to give as macro to the referenced ability. Each 'actions' node
							is pluged to a 'macro' node action of the referenced ability.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Actions à donner en tant que macro à la capacité référencée. Chaque
							noeud 'actions' est branché à un noeud d'action 'macro' de la capacité
							référencée.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="ref" type="xsd:string" use="required" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="system-ability">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				This ability can contain an 'effects' element, a list of actions corresponding to
				the effect part. This ability can be activated by only one event. When this is the
				looked for event, the specified test must be true. If the resolution is not
				'hidden', the 'picture' attribute (if specified) is used to determine the picture to
				use to represent ability in the stack.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Cette capacité peut contenir un element 'effects' qui est une liste d'actions
				effets. Cette capacité ne peut être activée que par un événement. Quand il s'agit de
				l'événement attendu, le test specifié est verifié et doit être vrai. Si le mode de
				resolution n'est pas 'hidden', l'attribut 'picture' sera utilise pour représenter la
				capacité dans la pile.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:group ref="triggeredEventGrp" />
				<xsd:element name="effects" type="actionListType" minOccurs="0" />
			</xsd:sequence>
			<xsd:attribute name="name" type="xsd:string" use="required" />
			<xsd:attribute name="resolution" type="resolutionEnum" />
			<xsd:attribute name="optimize" type="optimizeEnum" default="none" />
			<xsd:attribute name="picture" type="xsd:string" />
		</xsd:complexType>
	</xsd:element>
	<xsd:simpleType name="addIdCardType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				To add card identifiant to this card.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Pour ajouter des identifiant de carte a cette carte.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="IdCardList">
			<xsd:minLength value="0" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="IdCardList">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">A list of card identifiants.</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Une liste d'identifiants decolorType carte.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="idCardEnum" />
	</xsd:simpleType>
	<xsd:complexType name="setPlayerRegisterType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Set the initial registers of a player
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Positionne les registres d'un joueur.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:element name="register" minOccurs="0" maxOccurs="unbounded">
				<xsd:complexType>
					<xsd:attribute name="index" type="registerIndex" use="required" />
					<xsd:attribute name="value" type="registerValue" use="required" />
				</xsd:complexType>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>

	<xsd:complexType name="modifierType">
		<xsd:sequence>
			<xsd:element ref="registers" minOccurs="0" />
			<xsd:element ref="while" minOccurs="0" />
			<xsd:element ref="until" minOccurs="0" />
		</xsd:sequence>
		<xsd:attribute name="name" type="xsd:string" />
		<xsd:attribute name="layer" type="modifierLayerEnum" default="normal" />
		<xsd:attribute name="linked" type="xsd:boolean" default="false" />
	</xsd:complexType>

	<xsd:complexType name="modifierValueType">
		<xsd:complexContent>
			<xsd:extension base="modifierType">
				<xsd:attribute name="live-update" type="xsd:boolean" default="true" />
				<xsd:attribute name="operation" type="operationEnum" default="add" />
				<xsd:attribute name="activation-zone" type="xsd:string" default="play" />
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>

	<xsd:complexType name="actionType" abstract="true">
		<xsd:attribute name="name" type="xsd:string">
			<xsd:annotation>
				<xsd:documentation xml:lang="en">The optional action's name.</xsd:documentation>
				<xsd:documentation xml:lang="fr">
					Le nom optionel de cette action.
				</xsd:documentation>
			</xsd:annotation>
		</xsd:attribute>
	</xsd:complexType>
	<xsd:complexType name="messageActionType">
		<xsd:complexContent>
			<xsd:extension base="actionType">
				<xsd:sequence>
					<xsd:element name="text" type="xsd:string" minOccurs="0" maxOccurs="1">
						<xsd:annotation>
							<xsd:documentation xml:lang="en">
								The displayed text in this dialog box.
								<br />
								If this text starts with '$', it would be considered an i18n key.
								Complete the tbs properties files to associate a translated text.
							</xsd:documentation>
							<xsd:documentation xml:lang="fr">
								Le texte affiché dans cette boîte de dialogue.
								<br />
								Si le text commence par '$', il sera considéré comme un text
								internationnalisé. Compléter les fichiers properties du tbs pour
								traduire ce texte.
							</xsd:documentation>
						</xsd:annotation>
					</xsd:element>
				</xsd:sequence>
				<xsd:attribute name="controller" type="playerEnum" default="controller">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The controller of this dialog.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Le contrôleur de cette boîte de dialogue.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>
	<xsd:complexType name="inputActionType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				A dialog action requesting an answer or cancel.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Une action de boîte de dialogue requerant une réponse ou un abandon.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexContent>
			<xsd:extension base="messageActionType">
				<xsd:attribute name="operation" type="operationEnum" use="required">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The operation to apply to the given register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							L'opération à appliquer au registre.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="register" type="registerName" use="required">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The operation to apply to the given register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							L'opération à appliquer au registre.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
				<xsd:attribute name="index" type="registerIndex" use="required">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The modified register index modified by the given operation.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							L'index du registre modifié par l'opération associée à cette action.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:attribute>
			</xsd:extension>
		</xsd:complexContent>
	</xsd:complexType>


	<!-- **************** TESTS **************** -->
	<xsd:element name="test" type="testType" />
	<xsd:complexType name="testType">
		<xsd:sequence>
			<xsd:group ref="testTypeGrp" minOccurs="0" />
		</xsd:sequence>
		<xsd:attribute name="ref" type="xsd:string" />
	</xsd:complexType>
	<xsd:group name="testTypeGrp">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				A test on an object, current state,... A test is applied on all component of play :
				cards of from all zones an players. For each, if success component is added to alist
				that the current action will use. If 'card' attribute is set to 'tested', then the
				test would be applied on the tested component; whereas 'me' value indicates that the
				test would be done on the card containing this test. This attribute has no effect if
				the test is applied on game register for example. By default, for activated
				abilities's test, this tag is set to 'true'. For the other cases, this tag is by
				default set to 'false'.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Un test sur un objet, état courant,... Un test est applique a tous les composants du
				jeu : cartes de toutes les zones et joueurs. Pour chacun, si le test réussi, le
				composant est ajouté à une liste qui sera ensuite utilisée par l'action courant. Le
				mode 'card' mis à 'tested' indique que le test est appliqué sur le composant teste;
				mis a 'me', le test est applique sur la carte contenant ce test. Cette option n'a
				pas d'effet pour des tests portant sur les registres de jeu. Par defaut, ce tag est
				positionné à 'true' pour les tests des capacités actives, et est 'false' par défaut
				pour les autres tests.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="action-source">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the action generating the current event has the specified name.
							This test should used only in activation test of a triggered event.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si l'action générant l'événement courant à le nom spécifié. Ce
							test ne devrait être utilisé que dans le test d'activation d'une
							capacité déclenchée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="ability-is">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the ability owning this test is equal to the requested name.
							This test may be used in the restriction test of 'give-mana' action.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si le nom de la capacité controllant ce test est egal au nom
							requis. Ce test peut être utilise dans le test de restriction de
							l'action 'give-mana'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="ability-source">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the ability generating the current event has the specified name.
							This test should used only in activation test of a triggered event.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la capacité generant l'événement courant a le nom specifie. Ce
							test ne devrait être utilise que dans le test d'activation d'une
							capacité déclenchée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="and" type="binaryTest">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test X and then Y. Y is tested only if X was true.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste X puis Y. Y est teste uniquement si X etait true.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="controller">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card is controlled by a player. Valid only for card
							component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte est controllée a par un joueur. Uniquement pour le
							composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="player" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="player" type="playerEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="private-object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the specified component contains a named object.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si le composant specifie contient un objet nomme.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="operation" type="xsd:string" fixed="contains" />
						<xsd:attribute name="object-name" type="xsd:string" />
						<xsd:attribute name="object" type="testOn" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="target-list">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if a target-list contains a specified target.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la liste de cibles contient une cible specifiée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="list-index" type="valueType" minOccurs="0">
								<xsd:annotation>
									<xsd:documentation xml:lang="en">
										Index of target-list within the saved one. When this is not
										provided, the current target-list is used.-1 index
										corresponds to the last of saved lists.
									</xsd:documentation>
									<xsd:documentation xml:lang="fr">
										Index de la liste de cible dans la liste de cible
										sauvegardée. Lorsque cet attribut n'est pas renseigné, la
										liste courante est utilisée. L'index -1 correspond à la
										dernière liste sauvegardée.
									</xsd:documentation>
								</xsd:annotation>
							</xsd:element>
						</xsd:sequence>
						<xsd:attribute name="operation" type="xsd:string" fixed="contains" />
						<xsd:attribute name="list-index" type="registerValue">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									Index of target-list within the saved one. When this is not
									provided, the current target-list is used.-1 index corresponds
									to the last of saved lists.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									Index de la liste de cible dans la liste de cible sauvegardée.
									Lorsque cet attribut n'est pas renseigné, la liste courante est
									utilisée. L'index -1 correspond à la dernière liste sauvegardée.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="target" type="testOn" />
						<xsd:attribute name="card" type="cardEnum" />
						<xsd:attribute name="container" type="cardEnum" default="this">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									The container of the tested target-list. This parameter is only
									used when 'list-index' attribute is not provided.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									Le conteneur de la liste de cibles testée. Ce paramètre n'a de
									sens que lorsque l'attribut 'list-index' n'est pas renseigné.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="raise-event" type="xsd:boolean">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									When provided, honor this attribute to determine the constraint
									on the way the target has been added to the target list. This
									parameter is only used when 'list-index' atrribute is not
									provided.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									Lorsque ce paramètre est renseigné, il est pris en compte pour
									ajouter la contrainte sur la façon que la cible a été ajoutée
									dans la liste de cibles. Ce paramètre n'a de sens que lorsque
									l'attribut 'list-index' n'est pas renseigné.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="database">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Compare a database property to another value of a tested card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Compare une propriété de base de donnée avec une autre value pour une
							carte testée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="property" type="xsd:string" use="required" />
						<xsd:attribute name="value" type="xsd:string" use="required" />
						<xsd:attribute name="card" type="cardEnum" use="optional" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="deck-counter">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test cards in a deck with a threshold. When threshold is set to 'all',
							this test return false if one card of tested deck makes false the inner
							test.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste des cartes d'une deck avec un seuil. Lorsque le seuil est
							positionné à 'all', ce test retourne faux si une carte rend le test
							interne faux
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="testTypeGrp" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="ref" type="xsd:string" />
						<xsd:attribute name="card" type="cardEnum" />
						<xsd:attribute name="threshold" type="registerValue" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="different" type="binaryOp">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test X different Y.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste X different Y.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="equal" type="binaryOp">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test X equal Y.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste X egal Y.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="false">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Returns false.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Retourne faux.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType />
				</xsd:element>
				<xsd:element name="has-ability">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card has a the specified ability.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte contient la capacité specifiée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="name" type="xsd:string" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-action">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested ability contains the specified action name.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la capacitée testée contient le nom d'action specifie.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="name" type="xsd:string" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if there is at least one card making true the specified test.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste s'il exist au moins une carte la carte a une couleur. Uniquement
							pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="testTypeGrp" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="ref" type="xsd:string" />
						<xsd:attribute name="restriction-zone" type="zoneEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-color">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card has a specified color. Valid only for card component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte a une couleur. Uniquement pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="color" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="color" type="colorEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-keyword">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card has a specified keyword. Valid only for card component.
							This is a non-sensitive case comparator.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte a le mot-clé spécifié. Uniquement pour le composant
							carte. La comparaison ignore la casse.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-idcard">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card has a specified type. Valid only for card component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte a un type. Uniquement pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="idcard" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="idcard" type="idCardEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-name">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card has the specified name. If the name is not specified,
							the tested card name would be compared to the specified card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte à le nom specifié. Si le nom n'est pas specifié, le
							nom de la carte testée sera comparé avec la carte indiquée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-private-object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested component has a specified private object.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si le composant testé à un objet privé de nom specifié.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="target" type="testOn" default="tested" />
						<xsd:attribute name="object-name" type="xsd:string" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="has-property">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card has a specified property. Valid only for card
							component. When 'not-created-by-me' attribute is 'true' the properties
							created by the current card are ignored. The '...-mask' attributes allow
							to compare a set of properties in an internal range : the ones of the
							tested component, and the ones of specified with the mask.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte a une propriété. Uniquement pour le composant carte.
							Lorsque l'attribut 'not-created-by-me' est 'true', les propriétés créées
							par la carte courante sont ignorées. Les attributs '...-mask' permettent
							de confondre un ensemble de propriétés : celles du composant testé, et
							celles de renseignées avec le masque.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="property" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="property" type="propertyEnum" />
						<xsd:attribute name="not-created-by-me" type="xsd:boolean" default="false" />
						<xsd:attribute name="card" type="cardEnum" />
						<xsd:attribute name="idcard-mask" type="testOn" />
						<xsd:attribute name="color-mask" type="testOn" />
						<xsd:attribute name="property-mask" type="testOn" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="inf" type="binaryOp">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test X less Y.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste X inf Y.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="inf-equal" type="binaryOp">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test X less or equal Y.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste X inf ou egal Y.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="sup-equal" type="binaryOp">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test X sup or equal Y.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste X sup ou égal Y.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="in-idcard">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card type is within a set of types. Valid only for card
							component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si le type de la carte est contenu dans un ensemble de types.
							Uniquement pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="idcard" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="idcard" type="idCardEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="position">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card is in a requested position. Valid only for card
							component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte est dans une certaine position. Uniquement pour le
							composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="position" type="positionEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="in-zone">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test the place of component. Valid only for card component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste la zone de la carte. Uniquement pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="zone" type="zoneEnum" use="required" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="previous-zone">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test the previous place of component. Valid only for card component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste la précédente zone de la carte. Uniquement pour le composant
							carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="zone" type="zoneEnum" use="required" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-attached-to">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card is the card that the card owning this test is attached
							to. Valid only for card component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte testée correspond a la carte a laquelle la carte
							contenant ce test est attachée. Uniquement pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="card" type="cardEnum" />
						<xsd:attribute name="to" type="testOn" default="attachedto" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-face-up">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card owning this test is face up. Valid only for card
							component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte contenant ce test est face vers le haut. Uniquement
							pour le composant carte.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="is">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Compare two components together. As default, this test compares the
							current tested componant against the card owning this test. So as
							default, works as 'is-this' test.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Compare deux composants deux à deux. Par défaut, ce test compare le
							composant en test avec la carte contenant ce test, c'est-à-dire le même
							fonctionnement que le test 'is-this'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="target" type="testOn" default="this" />
						<xsd:attribute name="other" type="testOn" default="tested" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-aborting">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Indicates this card is currently attached to an aborted ability. If the
							'by' attribute is set, the abortion source is checked.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique que la carte testée est attachée à une capacité annulée. Si
							l'attribut 'by' est spécifié, la source de l'annulation est vérifiée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="card" type="cardEnum" default="tested" />
						<xsd:attribute name="by" type="testOn" default="tested" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-copy">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Is the tested card is a copy.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique que la carte testée est une copie.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="card" type="cardEnum" default="tested" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-this">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card owning this test is corresponding to the specified one.
							If the 'player' attribute is set, the test is applied on tested player
							and the specified one. To compare something else the owning card, prefer
							the 'is' test usage.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte contenant ce test correspond a la carte specifiée. Si
							l'attribut 'player' est positionné, le test est applique sur le joueur
							teste et le joueur specifie. Pour comparer avec autre chose que la carte
							contenant ce test, utiliser le test 'is' qui permet de définir
							manuellement les deux compsants à comparer.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="player" />
						<xsd:attribute name="card" default="tested" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-ability">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested component is an ability. if the 'type' field is given
							it checks if the ability is of that type.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique si le composant testé est une capacité.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="type" default="any" />
						<xsd:attribute name="target" default="tested" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="is-player" type="isTargetType">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested component is a player.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique si le composant testé est un joueur.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="is-spell" type="isTargetType">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested component is a spell.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique si le composant teste est un sort.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="is-face-up">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested card is face up.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique si la carte testée est face visible.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="not">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test not X.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste non X.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="testTypeGrp" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="ref" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="replace-tested">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Replace the tested component by another inside the nested test scope.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Remplace le composant testé par un autre dans le test interne.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="testTypeGrp" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="ref" type="xsd:string" />
						<xsd:attribute name="by" type="testOn" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="or" type="binaryTest">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test X or else Y. Y is tested only if X was false.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste X ou sinon Y. Y est testé uniquement si X était false.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="owner">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card is owned by a player. Valid only for card component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte appartient à par un joueur. Uniquement pour le
							composant carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="player" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="player" type="playerEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="playable-ability">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the tested ability is playable for the fixed purposes. The
							tested ability must be an activated one.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la jouabilité de la capacité testée correspond à ce qui est
							attendu. La capacité testée ne peut être qu'une capacité activée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="idcard" type="idCardEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="phase-is">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the current phase is the specified one.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la phase courante est la phase specifiée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="phase" type="valueType" minOccurs="0" />
							<xsd:element name="phase-index" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="phase-index" type="xsd:string" />
						<xsd:attribute name="phase" type="idPhaseEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="sup" type="binaryOp">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Test X sup Y.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Teste X sup Y.</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="test">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A référence to a declared test.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Une référence vers un test declare.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="ref" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="true">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Returns true.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Retourne vrai.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType />
				</xsd:element>
				<xsd:element name="xor" type="binaryTest">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test X xor Y. Exclusive or.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste X xor Y. Ou exclusif.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="valid-attachment">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card can be attached to the tested component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte peut être attachée au composant testé.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="from" type="testOn" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="valid-target-attachment">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Test if the card can become attached to the tested component.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Teste si la carte peut devenir attachée au composant testé.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="from" type="testOn" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>


	<!-- **************** ACTIONS **************** -->
	<xsd:complexType name="actionListType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">A list of available actions.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Une liste d'actions possibles.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:group ref="actionListGrp" minOccurs="0" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>
	<xsd:group name="actionListGrp">
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="abort">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Cancel the target list.</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Annule tous les sorts de liste de cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="action">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							A référence to an action.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Une référence vers une action.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="actions" type="actionListType" minOccurs="0" maxOccurs="unbounded"/>
							<xsd:element name="value" type="valueType" minOccurs="0" />
							<xsd:element name="test" type="testType" minOccurs="0" />
							<xsd:element name="counter-test" type="testType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="value" type="registerValue" />
						<xsd:attribute name="ref" type="xsd:string" use="required" />
						<xsd:attribute name="name" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="add-ability">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Create dynamically an activated ability to the target list. When the
							card leave play, this ability is removed. Ii is possible to reference
							the ability owning this action using the reference 'this'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Créé dynamiquement une capacité activée a la liste de cibles. Lorsque la
							carte quitte le jeu, cette capacité est retirée. Il est possible de
							référencer la capacité conenant cette action en utilisant la référence
							'this'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:choice minOccurs="0" maxOccurs="1">
										<xsd:element ref="triggered-ability" />
										<xsd:element ref="activated-ability" />
										<xsd:element ref="replacement-ability" />
									</xsd:choice>
									<xsd:element name="until" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												List of events destroying this ability.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Liste des événements qui provoquent la destruction
												de cette capacité.
											</xsd:documentation>
										</xsd:annotation>
										<xsd:complexType>
											<xsd:sequence>
												<xsd:group ref="triggeredEventGrp" minOccurs="0"
													maxOccurs="unbounded" />
											</xsd:sequence>
										</xsd:complexType>
									</xsd:element>
								</xsd:sequence>
								<xsd:attribute name="ref" type="xsd:string" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="add-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Add a modifier to the target list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Ajoute un modifieur a la liste de cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:group ref="modifierGrp" maxOccurs="unbounded" />
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="add-object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Add an object to the target list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Ajoute un objet a la liste de cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence />
								<xsd:attribute name="object-name" type="xsd:string" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="assign-damage">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To assign damages the target list or from a card to another component
							(player or card)
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour assigner des degats a la liste de cibles ou depuis une carte vers
							un player ou une carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="type" type="damageEnum"
									default="damage-normal" />
								<xsd:attribute name="value" type="registerValue" />
								<xsd:attribute name="from" type="cardEnum" />
								<xsd:attribute name="to" type="testOn" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="assign-damage-list">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To make the first card of target list assigning damage to the second
							target of list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour faire assigner des dégats par la première carte de la liste de
							cible à la deuxième cible de la liste.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="type" type="damageEnum"
									default="damage-normal" />
								<xsd:attribute name="value" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="attach">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Attach two cards together.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Attache deux cartes ensemble.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="from" type="cardEnum" />
								<xsd:attribute name="to" type="cardEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="attach-list">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Attach to the first card of the list, the other cards of the target
							list. So this action is valid only if there are at least 2 cards in the
							target list. The last card(s) are the card(s) to attach to the first one
							of the target list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Attache à la première carte de la liste, les autres cartes de la liste
							des cibles. Donc cette action n'est valide que s'il y a au moins deux
							cartes dans la liste des cibles. La(les) dernière(s) cartes sont
							attachées à la première carte de la liste des cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="valid-attachment" type="testType"
										minOccurs="0" />
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="restore-card">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Remove all copy effects from a card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Retire toutes les occurrences de copies de sur cette carte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="card" type="cardEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="copy-card">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Copy a card and place it into the target-list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Copie une carte et la place dans la liste de cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="excludes" maxOccurs="1" minOccurs="0">
										<xsd:complexType>
											<xsd:sequence>
												<xsd:element name="colors" minOccurs="0"
													maxOccurs="1" type="valuesType" />
												<xsd:element name="idcards" minOccurs="0"
													maxOccurs="1" type="valuesType" />
											</xsd:sequence>
											<xsd:attribute name="colors" type="xsd:string" />
											<xsd:attribute name="idcards" type="xsd:string" />
											<xsd:attribute name="name" type="xsd:boolean"
												default="false" />
										</xsd:complexType>
									</xsd:element>
								</xsd:sequence>
								<xsd:attribute name="card" type="cardEnum" use="required" />
								<xsd:attribute name="to" type="cardEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="choice">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Propose to choose within several valid actions list. If 'hop' attribute
							is specified and is 'true', cancel option would be available during the
							choice.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Propose de choisir entre plusieurs choix d'actions valides. Si
							l'attribut 'cancel' est specifié et est 'true', l'option annuler sera
							disponible au moment du choix.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="messageActionType">
								<xsd:sequence>
									<xsd:element name="hop" type="valueType" minOccurs="0" />
									<xsd:element name="either" type="actionListType"
										maxOccurs="unbounded" />
								</xsd:sequence>
								<xsd:attribute name="hop" type="registerValue">
									<xsd:annotation>
										<xsd:documentation xml:lang="en">
											Optional non zero jump to do when 'cancel' is pressed.
											Can only be specified when 'cancel' is allowed. When
											this attribute is not specified, 'cancel' cause the
											ability to be finished.
										</xsd:documentation>
										<xsd:documentation xml:lang="fr">
											Saut non nul à faire lorsque 'annuler' est choisi. Peut
											seulement être spécifié lorque 'annuler' est autorisé.
											Lorsque cet attribut n'est pas spécifié, 'annuler'
											provoque la fin de la capacité.
										</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="cancel" type="xsd:boolean" default="false" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="create-ability">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Create dynamically a triggered ability under your control. This ability
							can be hidden or visible in the DBZ (Delayed Buffer Zone).
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Cre dynamiquement une capacité sous votre control. Cette capacité peut
							être cachée ou visible dans la DBZ (Delayed Buffer Zone).
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="registers" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												To set any initial registers of ability. There are 2
												frée registers for this new ability.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Pour positionner un certain nombre de registres
												initiaux de la capacité. Il y'a 2 registres libres
												pour cette nouvelle capacité.
											</xsd:documentation>
										</xsd:annotation>
										<xsd:complexType>
											<xsd:sequence>
												<xsd:element name="register" minOccurs="0"
													maxOccurs="unbounded">
													<xsd:complexType>
														<xsd:choice>
															<xsd:element name="value"
																type="valueType" minOccurs="0" />
														</xsd:choice>
														<xsd:attribute name="index"
															type="modifierRegisterIndex" use="required" />
														<xsd:attribute name="value"
															type="registerValue" />
													</xsd:complexType>
												</xsd:element>
											</xsd:sequence>
										</xsd:complexType>
									</xsd:element>
									<xsd:element name="save" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												To save a card/player in this ability. This card may
												be acceded with the 'saved', 'savedplayer' or
												'saved' register.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Pour enregistrer une carte/joueur dans cette
												capacité. Ce composant peut par la suite être accede
												par la registre 'saved' ou 'savedplayer' ou 'saved'.
											</xsd:documentation>
										</xsd:annotation>
										<xsd:complexType>
											<xsd:attribute name="target" type="testOn"
												use="required" />
											<xsd:attribute name="target2" type="testOn" />
										</xsd:complexType>
									</xsd:element>
									<xsd:choice minOccurs="0" maxOccurs="unbounded">
										<xsd:element ref="triggered-ability" />
										<xsd:element ref="replacement-ability" />
										<xsd:element ref="ability" />
									</xsd:choice>
									<xsd:element name="until" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												List of events destroying this ability.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Liste des evements qui provoquent la destruction de
												cette capacité.
											</xsd:documentation>
										</xsd:annotation>
										<xsd:complexType>
											<xsd:sequence>
												<xsd:group ref="triggeredEventGrp" minOccurs="0"
													maxOccurs="unbounded" />
											</xsd:sequence>
										</xsd:complexType>
									</xsd:element>
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="create-card">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Create dynamically a card, and add it to the target list. No event are
							generated.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Ajoute a la liste de cible une nouvelle carte. Aucun événement n'est
							genere.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="card" />
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="create-modifier">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To add a modifier from a virtual card. Currently, only 'static-modifier'
							can be added. For more information, sée 'static-modifier' element.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour ajouter un modifieur à partir d'une carte virtuelle. Pour le
							moment, seul les 'static-modifier' peuvent être ajoutés. Plus
							d'information dans l'élément 'static-modifier'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="static-modifier" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="detachme">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Raise the event 'owner' should be detached from the it is attached to.
							Use the target list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Génère l'événement 'owner' devrait se detacher de la carte a laquelle
							elle est attachée. Utilise la liste de cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="face-up">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Turn the cards referenced by the current target-list face up.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Retourne les cartes référencées par la target-list courante la face vers
							le haut.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="for" type="visibilityEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="face-down">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Turn the cards referenced by the current target-list face down.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Retourne les cartes référencées par la target-list courante la face vers
							le bas.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="for" type="visibilityEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="force-play">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Force a player to play ONE or several abilities. The player must be in
							the first index of current target-list. When the forced ability is
							played, the corresponding card is add to the target-list. The 'hop'
							attribute is used to skip actions when no available ability can be
							played or when the player cancels this action. The 'must-be-played'
							attribute allow or not the player to cancel this action.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Force un joueur a jouer une ou plusieurs capacité. Le joueur doit être a
							la première place dans la liste de cibles. Lorsqu'une capacité forcée
							est jouée, la carte correspondante est ajoutée dans la liste de cibles.
							L'attribut 'hop' est utilise pour passe des actions quand il n'y a pas
							de capacité jouable ou si le joueur a decidé d'annuler cette action.
							L'attribut 'must-be-played' autorise ou non l'annulation de cette
							action.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="card-test" type="testType" minOccurs="0" />
									<xsd:element name="ability-test" type="testType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="must-be-played" type="xsd:boolean"
									use="required" />
								<xsd:attribute name="hop" type="registerValue" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="generate-event">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Generate the specified combat event.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							généré l'événement de combat specifie.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="attacking" type="registerName" use="required" />
								<xsd:attribute name="blocking" type="registerName" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="give-mana">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To add or remove mana to the active player. For each color, the amount a
							manas can be a fixed integer or a referenced value from any register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour ajouter ou retirer du mana au joueur actif. Pour chacune des
							couleurs, le nombre peut être un entier fixe, ou une valeur faisant
							référence a un registre.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:all>
									<xsd:element name="color" type="valueType" minOccurs="0" />
									<xsd:element name="colorless" type="valueType" minOccurs="0" />
									<xsd:element name="black" type="valueType" minOccurs="0" />
									<xsd:element name="blue" type="valueType" minOccurs="0" />
									<xsd:element name="green" type="valueType" minOccurs="0" />
									<xsd:element name="red" type="valueType" minOccurs="0" />
									<xsd:element name="white" type="valueType" minOccurs="0" />
									<xsd:element name="restriction" type="testType" minOccurs="0" />
								</xsd:all>
								<xsd:attribute name="color" type="registerValue" />
								<xsd:attribute name="colorless" type="registerValue" />
								<xsd:attribute name="black" type="registerValue" />
								<xsd:attribute name="blue" type="registerValue" />
								<xsd:attribute name="green" type="registerValue" />
								<xsd:attribute name="red" type="registerValue" />
								<xsd:attribute name="white" type="registerValue" />
								<xsd:attribute name="value" type="xsd:string" />
								<xsd:attribute name="to" type="playerEnum" default="controller" />
								<xsd:attribute name="card" type="cardEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="hide-zone">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Hide to opponents the specified zone of targeted player.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Cache aux adversaires une zone des joueurs cibles visible.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="zone" type="zoneEnum" use="required" />
								<xsd:attribute name="for" type="visibilityEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="hop">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Change the normal jump(1) in the current actions chain, to another one .
							This jump can be positive or negative. Zero mean infinite loop.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Modifiy le saut d'action a faire (normalement 1), par une autre valeur.
							Ce saut null equivaut donc a une boucle infinie.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="value" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="if-then-hop">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Depending on result of test, jump to the next action with hop equal to 1
							(normal case) for a true result, and jump to a specified hop for the
							false result. Like the if...then...else instruction.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Suivant le resulat du test, fait un saut de 1 (normal) pour un resulat
							donnant true, soit un saut de la valeur specifie pour un resulat false.
							Permet d'avoir des test identique a l'instruction si...alors...sinon.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:all>
									<xsd:element name="elsehop" type="valueType" minOccurs="0" />
									<xsd:element ref="test" minOccurs="0" />
								</xsd:all>
								<xsd:attribute name="elsehop" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="insert-ability">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To insert to the current ability the cost and the effect of référence
							ability. The referenced ability must be declared before this ability. If
							this action is placed into cost part, the cost of referenced ability
							replace this action and the effects of the current ability will start
							with effects of referenced ability. If this action is placed into effect
							part, the cost and the effect replace this action. Be carefull, if the
							referenced ability is a triggered one, actions must not use
							"context.card" ,...
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour inserer a la capacité en cours les coûts et les effets de la
							capacité référencée. La capacité référencée doit être declarée avant la
							definition de cette capacité. Si cette action est placée dans les coûts,
							les coûts de la capacité référencée remplacent cette action et les
							effets de la capacité courante commenceront avec les effets de la
							capacité référencée. Si cette action est placée dans les effets, les
							coûts et les effets remplacent cette action. faîtes attention, si la
							capacité référencéée est une capacité déclenchée, les actions ne doivent
							pas utiliser "context.card", ...
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="ref" type="xsd:string" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="lethal-damage">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Raise the 'lethal-damage' event that should be captured by a defined
							ability of game. This action raise ONLY this event, and should be called
							at the end of any ability dealting damages to update cards.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							généré l'événement 'lethal-damage' qui est cense être capture par une
							capacité du jeu. Cette action ne fait que de generer cet événement, et
							devrait être appelée la fin d'une capacité pour mettre a jour les degats
							infliges a des cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="lose-game">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Make a player lose the game. Doesn't use the target list to know the
							player.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Entraine une partie nulle. A tester.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="player" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="player" type="playerEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="macro">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Macro action, replaced by the provided action(s) in the reference call.
							If no action is provided, the ones in the 'default' node are used.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Action macro, remplacée par la/les actions données dans l'appel de la
							référence. So aucune action n'est fournies, celles décites dans le noeud
							'default' sont utilisées.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="default" type="actionListType" maxOccurs="1"
								minOccurs="1" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modify-register">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To modify a register or game property.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour modifier un registre ou une proriete du jeu.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
									<xsd:element name="index" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="operation" type="operationEnum" use="required" />
								<xsd:attribute name="register" type="registerName" use="required" />
								<xsd:attribute name="index" type="registerIndex" />
								<xsd:attribute name="value" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="move-card">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To move the current target list from their place to another. New
							position within the new zone, and the new controller have to be
							specified.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour déplacer la liste de cible de leur emplacement vers un autre. La
							position, et le nouveau contrôleur sont à preciser.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="position" type="positionEnum" default="top" />
								<xsd:attribute name="controller" type="playerEnum" use="required" />
								<xsd:attribute name="destination" type="zoneEnum" use="required" />
								<xsd:attribute name="silent" type="xsd:boolean" use="optional"
									default="false" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="move-object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Move an object from a component 'from' to another on 'to'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Déplace un objet d'un composant 'from' à un autre 'to'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="object-name" type="xsd:string" />
								<xsd:attribute name="from" type="testOn" />
								<xsd:attribute name="to" type="testOn" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="move-player-card">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To move any number of cards or the targeted player from their place to
							another. New position within the new zone, and the new controller have
							to be specified.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour deplacer un certain nombre de cartes du joeur cible d'une zone vers
							une autre. La position, et le nouveau contrôleur sont a preciser.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="position" type="positionEnum" default="top" />
								<xsd:attribute name="controller" type="playerEnum" use="required" />
								<xsd:attribute name="to" type="zoneEnum" use="required" />
								<xsd:attribute name="from" type="zoneEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="msg">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Display a message box with a customizable ok button and text. It's
							possible to use the multi-language ability for text and button label if
							string starts with the '$' character. In case of type is 'yesno', the
							answer is 0 for "YES", and 1 for "NO". To test the answer of this
							question, test the register named 'stack' at the index '0'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Affiche une boite de message avec un bouton ok et un texte
							personnalisables. Il est possible d'utiliser les possibilites du
							multi-langage pour le texte et le bouton s'ils commencent par le
							caractere '$'. Pour le type de message 'yesno', la reponse est '0' pour
							"OUI" et 1 pour "NON". Pour tester la reponse de cette question, testez
							le registre nomme 'stack' a l'index '0'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="messageActionType">
								<xsd:attribute name="type">
									<xsd:simpleType>
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												Type of message box.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Type de messages.
											</xsd:documentation>
										</xsd:annotation>
										<xsd:restriction base="xsd:string">
											<xsd:enumeration value="ok" />
											<xsd:enumeration value="yesno" />
											<xsd:enumeration value="confirm" />
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:attribute>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="input-number">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Display an input box waiting for an number choice.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Affiche une boite d'entrée de nombre entier.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="inputActionType">
								<xsd:sequence>
									<xsd:element name="minimum" type="valueType" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												The minimal value accepted for the displayed wizard.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												La valeur minimale acceptée pour ce dialog.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:element>
									<xsd:element name="maximum" type="valueType" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												The maximal value accepted for the displayed wizard.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												La valeur maximale acceptée pour ce dialog.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:element>
									<xsd:element name="default" type="valueType" minOccurs="0">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												The default value displayed in the dialog. By
												default, the maximal allowed value is used (%max).
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												La valeur affichée par défaut dans la boîte de
												dialogue. Par défaut la valeur maximale autorisée
												est utilisée.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:element>
								</xsd:sequence>
								<xsd:attribute name="minimum" type="registerValue">
									<xsd:annotation>
										<xsd:documentation xml:lang="en">
											The minimal value accepted for the displayed wizard.
										</xsd:documentation>
										<xsd:documentation xml:lang="fr">
											La valeur minimale acceptée pour ce dialog.
										</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="maximum" type="registerValue">
									<xsd:annotation>
										<xsd:documentation xml:lang="en">
											The maximal value accepted for the displayed wizard.
										</xsd:documentation>
										<xsd:documentation xml:lang="fr">
											La valeur maximale acceptée pour ce dialog.
										</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="default" type="registerValue"
									default="%maximum">
									<xsd:annotation>
										<xsd:documentation xml:lang="en">
											The default value displayed in the dialog. By default,
											the maximal allowed value is used (%max).
										</xsd:documentation>
										<xsd:documentation xml:lang="fr">
											La valeur affichée par défaut dans la boîte de dialogue.
											Par défaut la valeur maximale autorisée est utilisée.
										</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
								<xsd:attribute name="strict-max" type="xsd:boolean"
									default="true">
									<xsd:annotation>
										<xsd:documentation xml:lang="en">
											Allow or not to enter a value exceeding the maximal
											value. If false (default), the user can enter a higher
											value with a warning displayed in the dialog.
										</xsd:documentation>
										<xsd:documentation xml:lang="fr">
											Autorise ou non la saisie d'un entier supérieur à la
											valeur maximale. Si faux, l'utilisateur peut saisir un
											nombre plus grand mais un warning est affiché dans la
											boîte de dialogue.
										</xsd:documentation>
									</xsd:annotation>
								</xsd:attribute>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="input-color">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Display an input box waiting for a color choice. If the 'values' element
							is not provided, all colors will be displayed. When the 'colorless'
							attribute is true, the colorless mana is available and has the '0' code
							value. The updated register will contain the chosen color id code
							(0,1,2,4,8,...), and not the color index. So this code may be directly
							used with the 'has-color' test. To obtain an index (0,1,2,3...) from a
							given code, use 'to-index' expression.'to-code' expression does the
							reverse operation.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Affiche une invite d'entrée de choix de couleur. Si l'élément 'values'
							n'est pas renseigné, toute les couleurs seront proposées. Lorsque
							l'attribut 'colorless' est vrai, le mana incolor est sélectionnable et a
							pour code valeur '0'. Le registre mis à jour contiendra le code
							identifant de la couleur choisie (0,1,2,4,8...), et non pas son index.
							Ce code peut donc être utilisé directement avec le test 'has-color'.
							Pour obtenir un index à partir d'un code (0,1,2,3...) utiliser
							l'expression 'to-index'.L'expression 'to-code' fait l'opération inverse.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="inputActionType">
								<xsd:sequence>
									<xsd:element name="values" minOccurs="0" type="valuesType" />
								</xsd:sequence>
								<xsd:attribute name="values" type="xsd:string" />
								<xsd:attribute name="multiselect" type="xsd:boolean" use="optional"
									default="false" />
								<xsd:attribute name="colorless" type="xsd:boolean" use="optional"
									default="false" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="input-zone">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Display an input box waiting for an zone choice. If the 'values' element
							is not provided, all zones will be displayed.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Affiche une boîte d'entrée de zone. Si l'élément 'values' n'est pas
							renseigné, toute les zones seront proposées.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="inputActionType">
								<xsd:sequence>
									<xsd:element name="values" minOccurs="0" type="valuesType" />
								</xsd:sequence>
								<xsd:attribute name="values" type="xsd:string" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="input-property">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Display an input box waiting for a property choice.If the 'values'
							element is not provided, all properties will be displayed with the
							applied mask.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Affiche une boîte d'entrée de propriété. Si l'élément 'values' n'est pas
							renseigné, toute les propriétés seront proposées en appliquant le masque
							définit.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="inputActionType">
								<xsd:sequence>
									<xsd:element name="values" minOccurs="0" type="valuesType" />
								</xsd:sequence>
								<xsd:attribute name="values" type="xsd:string" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="int-list">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							'clear' operation clear the current int list. If 'list-index' is
							specified, the integer list saved at this index is cleared.
							'remove-last' operation remove the last integer from the current list.
							If 'list-index' is specified, the last integer is removed from integer
							list saved at this index. 'remove-first' operation remove the first
							integer from the current list. If 'list-index' is specified, the first
							integer is removed from integer list saved at this index. 'remove-queue'
							operation remove all integers but the first one from the current list.
							If 'list-index' is specified, all integers but the first are removed
							from integer list saved at this index. 'remove-tail' operation remove
							all integers but the last one from the current list. If 'list-index' is
							specified, all integers but the last are removed from integer list saved
							at this index. 'save' operation save the current int list into the top
							of the saved list. If 'index' and 'int' are specified, this integer is
							inserted to the specified index. If 'list-index', 'int' and 'index' are
							specified, the integer is inserted at this index in the saved list at
							'list-index'. 'load' operation load an integer list saved at the
							specified list-index. 'remove' operation remove from the current int
							list, the one placed at the specified index. If an integer is specified,
							it would be removed from the current list of integer. If 'list-index' is
							specified this operation is applied on the list saved at this index. If
							'list-index' is specified but neither 'index' neither 'int', the saved
							list at this index is removed from the saved lists. 'counter' operation
							list all occurrences of 'int' within the current int-list. If
							'list-index' and 'int' are specified, the occurence test is done in the
							saved list at this index. If only 'list-index' is specified, this
							operation lists occurrences of current int-list within the list saved at
							'list-index'. The result of this operation is added to the list of
							integers in the current int-list.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							'clear' operation efface la liste d'entiers courante . Si 'list-index'
							est specifié, la liste d'entier sauvegardée a cet index est effacée.
							'remove-last' operation retire le dernier entier de la liste d'entiers.
							Si 'list-index' est specifié, le dernier entier de la liste d'entiers
							sauvegardée a cet index est supprimée. 'remove-first' operation retire
							le premier entier de la liste d'entiers. Si 'list-index' est specifié,
							le premier entier de la liste d'entiers sauvegardée a cet index est
							supprimée. 'remove-queue' operation retire toutes les entier sauf le
							premier de la liste d'entier courante. Si 'list-index' est specifié,
							toutes les entiers sauf le premier entier est retire de la liste
							d'entier sauvegardée a cet index. 'remove-tail' operation retire toutes
							les entiers sauf le dernier de la liste d'entier courante. Si
							'list-index' est specifié, toutes les entiers sauf le dernier entier est
							retire de la liste d'entier sauvegardée a cet index. 'save' operation
							ajoute la liste d'entiers courante dans la liste des listes d'entiers
							sauvegardées. Si 'index' et 'int' sont specifiés, cet entier sera insere
							a l'index specifie. Si 'list-index', 'int' et 'index' sont specifiés,
							l'entier est inserée a cet index dans la liste sauvegardée a
							'list-index'. 'load' operation charge dans la liste d'entiers courante
							la liste qui avait ete sauvegardée a l'index specifie. 'remove'
							operation retire de la liste d'entiers courante l'entier place a l'index
							specifie. Si un entier 'int' est precise, il sera retire de la liste
							d'entier courant. Si 'list-index' est specifié cette operation est
							appliquée sur la liste sauvegardée a cet index. Si 'list-index' est
							specifie mais ni 'index' ni 'int', la liste sauvegardée a cet index est
							retirée des listes sauvegardées. 'counter' operation liste toutes les
							occurrences de 'int' dans la liste courantes d'entiers. Si 'list-index'
							et 'int' sont specifiés, le test d'occurence est fait dans la liste
							sauvegardée a cet index. Si seulement 'list-index' est specifié, cette
							operation liste les occurrences de la liste d'entiers courants dans la
							liste sauvegardée a cet 'list-index'. Le résultat de cette operation est
							enregistre a la suite la liste courante des entiers int-list.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:all>
									<xsd:element name="index" type="valueType" minOccurs="0" />
									<xsd:element name="value" type="valueType" minOccurs="0" />
									<xsd:element name="list-index" type="valueType" minOccurs="0" />
									<xsd:element ref="test" minOccurs="0" />
								</xsd:all>
								<xsd:attribute name="operation" use="required">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:enumeration value="set" />
											<xsd:enumeration value="add" />
											<xsd:enumeration value="clear" />
											<xsd:enumeration value="reset" />
											<xsd:enumeration value="zero" />
											<xsd:enumeration value="mult" />
											<xsd:enumeration value="and" />
											<xsd:enumeration value="or" />
											<xsd:enumeration value="xor" />
											<xsd:enumeration value="minus" />
											<xsd:enumeration value="minimum" />
											<xsd:enumeration value="maximum" />
											<xsd:enumeration value="incr" />
											<xsd:enumeration value="decr" />
											<xsd:enumeration value="increment" />
											<xsd:enumeration value="decrement" />
											<xsd:enumeration value="add-half-truncated" />
											<xsd:enumeration value="add-half-rounded" />
											<xsd:enumeration value="div-truncated" />
											<xsd:enumeration value="div-rounded" />
											<xsd:enumeration value="remove-last" />
											<xsd:enumeration value="remove-first" />
											<xsd:enumeration value="remove-queue" />
											<xsd:enumeration value="remove-tail" />
											<xsd:enumeration value="remove-all" />
											<xsd:enumeration value="add-all" />
											<xsd:enumeration value="save" />
											<xsd:enumeration value="load" />
											<xsd:enumeration value="remove" />
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:attribute>
								<xsd:attribute name="value" type="registerIndex" />
								<xsd:attribute name="index" type="registerIndex" />
								<xsd:attribute name="list-index" type="registerIndex" />
								<xsd:attribute name="macro" type="xsd:boolean" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="next-current-player">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Set the player who will be the 'current' one to the next turn.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Positionne le joueur qui sera le 'courant' au tour prochain.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="player" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="player" type="playerEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="next-phase">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Set the next phase name.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Indique le nom de la phase suivante.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="phase" type="valueType" minOccurs="0" />
									<xsd:element name="phase-index" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="phase-index" type="xsd:string" />
								<xsd:attribute name="phase" type="idPhaseEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="pay-mana">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To add or remove mana to the active player. For each color, the amount a
							manas can be a fixed integer or a referenced value from any register.
							Warning: The generated event ('modifiedregister ragister="player"
							index="..."') cannot be replaced.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour ajouter ou retirer du mana au joueur actif. Pour chacune des
							couleurs, le nombre peut être un entier fixe, ou une valeur faisant
							référence a un registre. Attention : l'événement généré
							('modifiedregister ragister="player" index="..."') ne peut être
							remplace.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:all>
									<xsd:element name="colorless" type="valueType" minOccurs="0" />
									<xsd:element name="black" type="valueType" minOccurs="0" />
									<xsd:element name="blue" type="valueType" minOccurs="0" />
									<xsd:element name="green" type="valueType" minOccurs="0" />
									<xsd:element name="red" type="valueType" minOccurs="0" />
									<xsd:element name="white" type="valueType" minOccurs="0" />
								</xsd:all>
								<xsd:attribute name="colorless" type="registerValue" />
								<xsd:attribute name="black" type="registerValue" />
								<xsd:attribute name="blue" type="registerValue" />
								<xsd:attribute name="green" type="registerValue" />
								<xsd:attribute name="red" type="registerValue" />
								<xsd:attribute name="white" type="registerValue" />
								<xsd:attribute name="value" type="xsd:string" />
								<xsd:attribute name="controller" type="playerEnum" default="you" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="remove-object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Remove an object from the component of target list. The specified test
							is used to filter the target list components involved by this action.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Retire une instance d'un objet a la liste de cibles. Le test optionel
							est utilise pour filtrer les composants de la liste de cibles concernes
							par cette action.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element ref="test" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="object-name" type="xsd:string" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="repeat">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Repeat the next action n times. If the value is negative or zero, the
							next action would be skipped.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Repete un nombre de fois la prochaine action. Si le nombre est inferieur
							ou egal a zero, l'action suivante sera passée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="value" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="value" type="registerValue" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="resolve-hidden">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Push in the stack and resolve hidden abilities present in the TBZs. No
							player gets priority.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Met dans la pile et resoud l'ensemble des capacités presentes dans les
							TBSs. Aucun joueur ne prend la priorité.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="show-zone">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Show to opponents the specified zone of targeted player.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Montre aux adversaires une zone des joueurs cibles visible.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="zone" type="zoneEnum" use="required" />
								<xsd:attribute name="for" type="visibilityEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="shuffle">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Shuffle the zone of targeted player(s). Use the target list to know
							player(s).
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Melange une zone des joueurs qui ont ete prealamlement ajoutes dans la
							list des cibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="zone" type="zoneEnum" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="skip-phase">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Skip a specified phase following it's identifiant.The target list is
							used to known the player(s) phase to skip.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Saute une phase specifiée selon son identifiant.La liste des cibles est
							utilisée pour connaitre le(s) joueur(s) pour qui la phase sera passée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="phase" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="phase" type="idPhaseEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="sound">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Play a sound (wav,mp3,au,mid,aif,rmf). The 'file' attribute is the sound
							file to play, and is relative to the 'TBS/sounds' directory.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Joue un son (wav,mp3). L'attribut 'file' correspond au nom du fichier
							son a jouer, et est relatif au repertoire 'TBS/sounds'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="file" type="xsd:string" use="required" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="tap">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Tap the target list. Error if target list contains objects not instance
							of card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Engage la liste de cibles. Erreur si la liste de cible contient des
							objets qui ne sont pas des cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="rot90">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Tap the target list. Error if target list contains objects not instance
							of card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Engage la liste de cibles. Erreur si la liste de cible contient des
							objets qui ne sont pas des cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="update-toughness">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							For each card in the target list, raise the 'update-toughness' event
							that should be captured by a defined ability of game. This action raise
							ONLY this event, and should be called at the end of any ability dealting
							damages to update cards for example.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour chaque carte dans la liste de cibles, génére l'événement
							'update-toughness' qui est censé être capturé par une capacité du jeu.
							Cette action ne fait que de générer cet événement et devrait être
							appelée la fin d'une capacité pour mettre à jour les dégâts infligés à
							des cartes par exemple.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="target">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Add to the target list card(s) or player(s) following the specified mode
							and the specified type. If mode is 'choose' or 'opponent-choose', then a
							'targeted' event is raised when the choice is made. In the others cases,
							no event is generated. The friendly test, and the type are necessary
							only for the modes 'random', 'all', 'choose' et 'opponent-choose' to list
							the valid targets. The target list is used by the most actions, and is
							the most important action of the game since that is with this list that
							a lot of actions work. For example, if the next action is 'damage', all
							cards/player from the target list would be damaged. When a new ability
							is added to the stack, a new empty list is created and attached to it.
							Actions may modify, access it until the ability is completely resolved.
							When the 'raise-event' attribute not specified, program generates event
							only if player has to make a choice. 'cancel' can be used only 'hop' is
							different from 'abort-me'. When is 'false' player cannot decline to make
							a choice if there is almost one valid target.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Ajoute à la liste des cibles une carte ou un joueur selon le mode et le
							type precisé. Si le mode est 'choose' ou 'opponentchoose', un événement
							'targeted' est généré lorsque le choix est fait. Dans les autres cas,
							aucun événement n'est généré par défaut. Le test, et le type
							accompagnant cette action ne sont utilisés que pour les modes de ciblage
							global 'random', 'all', 'choose' et 'opponentchoose' qui permettent de
							lister les cibles valides. La liste de cible est certainement le
							composant le plus important du moteur car c'est par cette liste est
							utilisée par beaucoup d'actions. Par exemple si l'action suivante est
							'damage', c'est l'ensemble des cibles qui sont dans la liste des cibles
							qui sont concerneés par les dégâts. Une liste vide est créée pour chaque
							capacité ajoutée à la pile, et peut etre manipulée/accedée par
							l'ensemble des actions de la capacité. La liste est détruite lorsque la
							capacité est resolue complètement. Lorsque l'attribut 'raise-event'
							n'est pas specifié, le programme ne généra d'événement que si le joueur
							doit faire un choix.'cancel' ne peut être utilisé que si 'hop' est
							différent de 'abortme'. Lorsqu'il est 'false' le joueur ne peut décliner
							de choisir une cible valide.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:all>
									<xsd:element ref="test" minOccurs="0" />
								</xsd:all>
								<xsd:attribute name="cancel" type="xsd:boolean" default="false" />
								<xsd:attribute name="hop" type="registerValue" default="abortme" />
								<xsd:attribute name="type" use="required">
									<xsd:simpleType>
										<xsd:union memberTypes="testOn">
											<xsd:simpleType>
												<xsd:restriction base="xsd:string">
													<xsd:enumeration value="card" />
													<xsd:enumeration value="player" />
													<xsd:enumeration value="target" />
													<xsd:enumeration value="dealtable" />
													<xsd:enumeration value="private-object" />
												</xsd:restriction>
											</xsd:simpleType>
										</xsd:union>
									</xsd:simpleType>
								</xsd:attribute>
								<xsd:attribute name="mode" type="modeEnum" default="choose" />
								<xsd:attribute name="raise-event" type="xsd:boolean" />
								<xsd:attribute name="restriction-zone" type="zoneEnum" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="private-object">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Manipulate maps of private objects of cards.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Manipule des tables d'objets privés de cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:attribute name="operation" use="required">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:enumeration value="clear" />
											<xsd:enumeration value="add" />
											<xsd:enumeration value="remove" />
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:attribute>
								<xsd:attribute name="object-name" type="xsd:string" />
								<xsd:attribute name="object" type="testOn" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="target-list">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Manipulate list of targeted components. 'clear' operation clear the
							current target list. If 'list-index' is specified, the target list saved
							at this index is cleared. 'remove-last' operation remove the last target
							from the current list. If 'list-index' is specified, the last target is
							removed from target list saved at this index. 'remove-first' operation
							remove the first target from the current list. If 'list-index' is
							specified, the first target is removed from target list saved at this
							index. 'remove-queue' operation remove all targets but the first one
							from the current list. If 'list-index' is specified, all targets but the
							first are removed from target list saved at this index. 'remove-tail'
							operation remove all targets but the last one from the current list. If
							'list-index' is specified, all targets but the last are removed from
							target list saved at this index. 'collapse-combat' operation is called
							to group natively defending/attacking card. Would be removed later. The
							'list-index' is required. 'save' operation save the current target list
							into the top of the saved list. If 'index' and 'target' are specified,
							this target is inserted to the specified index. If 'list-index',
							'target' and 'index' are specified, the target is inserted at this index
							in the saved list at 'list-index'. 'load' operation load a target list
							saved at the specified list-index. 'remove' operation remove from the
							current target list, the one placed at the specified index. If a target
							is specified, it would be removed from the current list of target. If
							'list-index' is specified this operation is applied on the list saved at
							this index. If 'list-index' is specified but neither 'index' neither
							'target', the saved list at this index is removed from the saved lists.
							'counter' operation list all occurrences of 'target' within the current
							target-list. If 'list-index' and 'target' are specified, the occurrence
							test is done in the saved list at this index. If only 'list-index' is
							specified, this operation lists occurrences of current target-list within
							the list saved at 'list-index'. The result of this operation is added to
							the list of integers in the current int-list. 'filter' operation keep
							only targets making true the specified test. If 'list-index' is
							specified, this operation is applied on the saved list at 'list-index'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Manipule des listes de cibles de composants. 'clear' operation efface la
							liste de cibles courante . Si 'list-index' est specifié, la liste de
							cible sauvegardée a cet index est effacée. 'remove-last' operation
							retire la dernière cible de la liste de cibles. Si 'list-index' est
							specifié, la dernière cible de la liste de cible sauvegardée a cet index
							est supprimée. 'remove-first' operation retire la première cible de la
							liste de cibles. Si 'list-index' est specifié, la première cible de la
							liste de cible sauvegardée a cet index est supprimée. 'remove-queue'
							operation retire toutes les cibles sauf la première de la liste de
							cibles courante. Si 'list-index' est specifié, toutes les cibles sauf la
							première cible est retirée de la liste de cible sauvegardée a cet index.
							'remove-tail' operation retire toutes les cibles sauf la dernière de la
							liste de cibles courante. Si 'list-index' est specifié, toutes les
							cibles sauf la dernière cible est retirée de la liste de cible
							sauvegardée a cet index. 'collapse-combat' operation is appelée pour
							grouper nativement les cartes attattaquantes/bloquantes. Sera retirée
							prochainement. 'save' operation ajoute la liste de cibles courante dans
							la liste des listes de cibles sauvegardées. Si 'index' et 'target' sont
							specifiés, cette cible sera inserée a l'index specifie. Si 'list-index',
							'target' et 'index' sont specifiés, la cible est inserée a cet index
							dans la liste sauvegardée a 'list-index'. 'load' operation charge dans
							la liste de cibles courante la liste qui avait ete sauvegardée a l'index
							specifie. 'remove' operation retire de la liste de cibles courante la
							cible placée à l'index specifié. Si une cible est precisée, elle sera
							retirée de la liste de cibles courante. Si 'list-index' est specifié
							cette operation est appliquée sur la liste sauvegardée à cet index. Si
							'list-index' est specifié mais ni 'index' ni 'target', la liste
							sauvegardée a cet index est retirée des listes sauvegardées. 'counter'
							operation liste toutes les occurrences de 'target' dans la liste
							courantes de cibles. Si 'list-index' et 'target' sont specifiés, le test
							d'occurence est fait dans la liste sauvegardée a cet index. Si seulement
							'list-index' est specifié, cette operation liste les occurrences de la
							liste de cibles courantes dans la liste sauvegardée à cet 'list-index'.
							Le résultat de cette operation est enregistré à la suite la liste
							courante des entiers int-list. 'filter' operation retire toutes les
							cibles ne rendant pas vrai le test specifie. Si 'list-index' est
							specifié, cette operation est appliqué sur la liste sauvegardée a
							'list-index'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:all>
									<xsd:element name="index" type="valueType" minOccurs="0" />
									<xsd:element name="list-index" type="valueType" minOccurs="0" />
									<xsd:element name="nb-attacking-group" type="valueType"
										minOccurs="0" />
									<xsd:element ref="test" minOccurs="0" />
								</xsd:all>
								<xsd:attribute name="operation" use="required">
									<xsd:simpleType>
										<xsd:restriction base="xsd:string">
											<xsd:enumeration value="clear" />
											<xsd:enumeration value="counter" />
											<xsd:enumeration value="remove-last" />
											<xsd:enumeration value="remove-first" />
											<xsd:enumeration value="remove-queue" />
											<xsd:enumeration value="remove-tail" />
											<xsd:enumeration value="remove-all" />
											<xsd:enumeration value="add-all" />
											<xsd:enumeration value="collapse-combat" />
											<xsd:enumeration value="save" />
											<xsd:enumeration value="load" />
											<xsd:enumeration value="remove" />
											<xsd:enumeration value="filter" />
										</xsd:restriction>
									</xsd:simpleType>
								</xsd:attribute>
								<xsd:attribute name="target" type="testOn" />
								<xsd:attribute name="index" type="registerIndex" />
								<xsd:attribute name="list-index" type="registerIndex" />
								<xsd:attribute name="nb-attacking-group" type="registerIndex" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="unregister-this">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Remove the current ability from the event listeners. The removed ability
							can no more be activated until it has been registered. If this ability
							is a delayed ability, all saved objects are no more visible for it. Note
							that this ability is not aborted or stopped, but prevent it to be
							activated later. Is often used to increase game performances since the
							attached event is no more listened.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Retire la capacité courante des écouteurs d'événement. Cette capacité ne
							peut donc plus être activée tant qu'elle n'a pas été à nouveau incrite
							dans la liste des écouteurs. Si cette capacité est une capacitée
							retardéé, alors les objets sauvegardés ne lui sont plus visibles. Notez
							que cette capacité n'est ni annulée ni stoppée, mais évite son
							activation future. Est souvent utilisée pour augmenter les performances
							du jeu car l'événement attaché n'est plus écouté.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType"></xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="untap">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Untap the target list. Error if target list contains objects not
							instance of card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Degage la liste de cibles. Erreur si la liste de cible contient des
							objets qui ne sont pas des cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="rot0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Untap the target list. Error if target list contains objects not
							instance of card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Degage la liste de cibles. Erreur si la liste de cible contient des
							objets qui ne sont pas des cartes.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="update-life">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Raise the 'update-life' event that should be captured by a defined
							ability of game. This action raise ONLY this event, and should be called
							at the end of any ability dealting damages to update player life status.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							généré l'événement 'update-life' qui est cense être capture par une
							capacité du jeu. Cette action ne fait que de generer cet événement, et
							devrait être appelée la fin d'une capacité pour mettre a jour les degats
							infliges a des joueurs.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType" />
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>

	<!-- **************** EVENTS **************** -->
	<xsd:group name="triggeredEventGrp">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				List of events we can listenning. To each, one or more tests are bundled depending
				the listened event, and a context is stored. This one contains information about the
				game state when this event has been activated and may contains cards,players,int
				depending the event. This context can be acceded with the 'context.card',
				'context.card2', 'context.player', 'context.int' and 'context.int2' registers
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Liste d'événements que l'on peut écouter. A chacun de ces événements est attache un
				ou plusieurs tests dependants de l'événement écoute. Pour chacun de ces événement un
				contexte est mis en place et contient un ou plusieurs cartes/joueurs/int suivant
				l'événement. Ce context reste en place pendant tous le deroulement de la capacité et
				peut être accede via les registres 'context.card', 'context.card2',
				'context.player', 'context.int' et 'context.int2'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="attached-to">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card become attached to another card. The first card of context
							(context.card) is the attached card, the second card of context
							(context.card2) is the card receiving the card.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte devient attachée a une autre. La première carte du
							context (context.card) est la carte qui s'est attachée, la seconde carte
							du contexte (context.card2) est la carte a laquelle elle devient
							attachée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="attached-test" type="testType" minOccurs="0" />
							<xsd:element name="to-test" type="testType" minOccurs="0" />
						</xsd:all>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="become-tapped">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card become tapped. The attached test is applied to the card
							concerned by this event. The context contains the tapped card, and can
							be acceded with the 'context.card' register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte devient engagée. Le test attache est applique a la carte
							concernée par cet événement. Le contexte contient la carte engagée qui
							peut être accedée via le registre 'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="become-untapped">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card become untapped. The attached test is applied to the card
							concerned by this event. The context contains the untapped card, and can
							be acceded with the 'context.card' register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte devient degagée. Le test attache est applique a la carte
							concernée par cet événement. Le contexte contient la carte degagée qui
							peut être accedée via le registre 'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="assigned-damage">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a component is damaged. There are three attached tests. The first
							one is applied on card containing this event.The 2 others are applied on
							source and destination of this damages. This event is generated once per
							group of damage on a component (card or player). The context contains
							the destination and the source components (in this order), and can be
							acceded with the 'context.card','context.player' registers for the
							destination, and 'context.card2' register for the source. The amount of
							damage can be read from the 'context.int' register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand un element recoit des degats. Les 3 tests attachés s'appliquent
							sur la carte contenant cet événement, la source et sur la destination
							des degats.Le contexte contient la destination et la cartes source et
							peuvent être accedée respectivement via les registres 'context.card' ou
							'context.player' et le registre 'context.card2'. La quantite de degat
							peut être accedée par le registre 'context.int'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element ref="test" minOccurs="0" />
							<xsd:element name="source-test" type="testType" minOccurs="0" />
							<xsd:element name="destination-test" type="testType" minOccurs="0" />
						</xsd:all>
						<xsd:attribute name="type" type="damageEnum" default="damage-any" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="declared-attacking">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card is declared as attacking. The attached test is applied to
							the card concerned by this event. The context contains the attacking
							card, and can be acceded with the 'context.card' register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte est declarée attaquante. Le test attache est applique a
							la carte concernée par cet événement. Le contexte contient l'attaquant
							qui peut être accede via le registre 'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="declared-blocking">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card is declared as blocking. The 2 attached tests are applied on
							the blocking and on the blocked card. The context contains the blocking
							card and the blocked one, and can be acceded with the 'context.card' and
							'context.card2' registers.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte est declarée bloquante. Les 2 tests attachés sont
							appliqués sur le bloquant et sur le bloqué. Le contexte contient le
							bloquant et l'attaquant qui peuvent être accédés via les registres
							'context.card' et 'context.card2'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="attacking-test" type="testType" minOccurs="0" />
							<xsd:element name="blocking-test" type="testType" minOccurs="0" />
						</xsd:all>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="attached-to">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When card becomes attached to a component. The component of context is
							context.card/player and the attached card of context is context.card2.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte devient attachée a un composant. Le composant du context
							est context.card/player et la carte attachée du contexte est
							ontext.card2.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="attached-test" type="testType" minOccurs="0" />
							<xsd:element name="by-test" type="testType" minOccurs="0" />
						</xsd:all>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="detached">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When an attached card is detached from another. The first card of
							context (context.card) is the detached card, the second card of context
							(context.card2) is the card to which it was attached.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Quand une carte attachée se detache d'une autre. La première carte du
							context (context.card) est la carte qui s'est detachée, la seconde carte
							du contexte (context.card2) est la carte à laquelle elle etait attachée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="detached-test" type="testType" minOccurs="0" />
							<xsd:element name="from-test" type="testType" minOccurs="0" />
						</xsd:all>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="catch-exception">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a java exception occurred when an action has been performed.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'une exception java est généré durant l'execution d'une action.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element ref="test" minOccurs="0" />
								</xsd:sequence>
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="given-mana">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When mana is given to a player. The 2 attached tests are applied on the
							source and the player. The context contains the source, the player, the
							mana color, the mana amount and the attached restriction usage of this
							mana, and can be acceded with the 'context.player' for the player,
							'context.card2' register for the source, 'context.int' for the color,
							'context.int2' for the amount, 'context.test' for the restriction
							usage test .
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque du mana est donne a un joueur. Les 2 tests attachés s'appliquent
							sur la source et sur le joueur. Le context contient la source, le
							joueur, la couleur du mana, la quantite et la restriction d'utilisation
							du mana, et qui peuvent être respectivement accédés via les registres
							'context.card2' pour la source, 'context.int' pour la couleur,
							'context.int2' pour la quantite, 'context.test' pour le test de
							restrictiction d'utilisation .
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="source-test" type="testType" minOccurs="0" />
							<xsd:element name="player-test" type="testType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="color" type="xsd:string" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="lose-game">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a player is going to lose. The attached test is applied on the
							loosing player. The context contains this player, and can be acceded
							with the 'context.player' register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'un joueur va perdre la partie. Le test attache s'applique sur le
							joueur perdant. Le context contient ce joueur, et peut donc être
							accessible via le registre 'context.player'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modified-idcard">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card id is modified. The attached test is applied on the card
							containing this event. The context contains the card that the controller
							has been modified and be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque le type d'une carte est modifié. Le test attaché s'applique sur
							la carte contenant cet événement. Le context contient la carte dont le
							contrôleur a été modifié qui peut être accédé via le registres
							'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="idcard" type="idCardEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modified-color">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a color is modified. The attached test is applied on the card
							containing this event. The context contains the card that the controller
							has been modified and be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque la couleur d'une carte est modifie. Le test attache s'applique
							sur la carte contenant cet événement. Le context contient la carte dont
							le contrôleur a ete modifie qui peut etre accede via le registres
							'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modified-controller">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card's controller is modified. The attached test is applied on
							the card containing this event. The context contains the card that the
							controller has been modified and be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque le controllleur d'une carte est modifie. Le test attache
							s'applique sur la carte contenant cet événement. Le context contient la
							carte dont le contrôleur a ete modifie qui peut être accede via le
							registres 'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modified-owner">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card's owner is modified. The attached test is applied on the
							card containing this event. The context contains the card that the
							controller has been modified and be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque le pocesseur d'une carte est modifie. Le test attache s'applique
							sur la carte contenant cet événement. Le context contient la carte dont
							le contrôleur a ete modifie qui peut etre accede via le registres
							'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modified-property">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card's property is modified. The attached test is applied on the
							card containing this event. The context contains the card that the
							controller has been modified and be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque la propriété d'une carte est modifiée. Le test attache
							s'applique sur la carte contenant cet événement. Le context contient la
							carte dont le contrôleur a ete modifie qui peut etre accede via le
							registres 'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
							<xsd:element name="property" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="property" type="propertyEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="modified-register">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a register value is modified. The attached test is applied on the
							card containing this event. The context contains this card containing
							this event and the modified register name and index and be acceded with
							the 'context.card' and 'context.int' registers.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'un registre est modifie. Les test attachés s'appliquent sur la
							carte source de la modification, et sur la cible dont le registre a été
							modifié. Le context contient la carte source, l'object modifie
							(carte/joueur), le code representant le registre et l'index modifié qui
							peuvent être accédés via les registres 'context.card2', 'context.card'
							et 'context.int'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:all>
							<xsd:element name="source-test" type="testType" minOccurs="0" />
							<xsd:element name="destination-test" type="testType" minOccurs="0" />
							<xsd:element ref="test" minOccurs="0" />
						</xsd:all>
						<xsd:attribute name="register" type="listenerRegisterName" use="required" />
						<xsd:attribute name="index" type="registerIndex" use="required" />
						<xsd:attribute name="index-sup" type="registerIndex" />
						<xsd:attribute name="operation" type="operationEnum" default="any" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="moved-card">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When this a card move from a place to another one. The 2 attached tests
							are applied on the moving card before and after the move. The context
							contains this card and the destination zone, and can be acceded with the
							'context.card' and 'context.int' registers.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'une carte va d'une zone vers une autre. Les 2 tests attachés
							s'appliquent sur la carte avant et apres le deplacement. Le context
							contient cette carte ainsi que la zone de destination, et peuvent être
							accessibles via les registres 'context.card' et 'context.int'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="source-test" type="testType" minOccurs="0" />
							<xsd:element name="destination-test" type="testType" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="arranged-zone">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a zone is arranged.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'une zone est arrangée.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="test" type="testType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="zone" type="zoneEnum" default="anywhere" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="targeted">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When this a component is targeted. The 2 attached tests are applied on
							the source and the destination. The context contains the source and the
							destination, and can be acceded with the 'context.card' or
							'context.player' for the destination, and 'context.card2' register for
							the source.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'une carte/joueur est cible. Les 2 tests attachés s'appliquent sur
							la source et sur la destination. Le context contient la destination et
							la source qui peuvent être respectivement accede via les registres
							'context.card' or 'context.player', and 'context.card2' pour la source.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="source-test" type="testType" minOccurs="0" />
							<xsd:element name="destination-test" type="testType" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="update-life">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When this event is raised. The attached test is applied on the card
							containing this event or game registers. This is a global event with
							neither more information, neither context.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque l'événement 'update-life' est genere. Le test attache ne
							s'applique que sur la carte contenant cet événement ou des registres du
							jeu. C'est un événement global n'etant accompagne ni d'autre information
							ni de contexte.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="update-toughness">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When this event is raised. The attached test is applied by default on
							the card to update. The 'context.card' object can be used in the actions
							to acceded to the card to update.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque l'événement 'update-toughness' est genere. Le test attache
							s'applique par defaut sur la carte a mettre a jour. L'objet
							'context.card' permet d'acceder dans les actions, a la carte a mettre a
							jour.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="lethal-damage">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When this event is raised for a card. The attached test is applied on
							the context card. So result differs depending on the tag value 'card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque l'événement 'lethal-damageeventType' est généré pour une carte.
							Le résultat test du test dépendra de la valeur du tag 'card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="before-phase">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Raised before a phase really happens. The attached test is applied on
							the card containing this event. The context contains only the current
							phase identifier and the current player, and can be acceded with the
							'context.int' and 'context.player' registers.So, the 'card' tag of the
							test element should be to true. The specified phase name must have been
							previously defined as alias.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Juste avant qu'une phase ne commence réellement. Le test attache
							s'applique sur la carte contenant cet événement. Le context contient
							l'identifiant de la phase et le joueur dont c'est le tour, et peuvent
							être accessibles via les registres 'context.int' et 'context.player'.Le
							tag 'card' du test devrait être donc mis a true. Le nom de la phase doit
							avoir ete definie comme un alias.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="phase" type="idPhaseEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="beginning-of-phase">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Raised at the beginning of a phase. The attached test is applied on the
							card containing this event. The context contains only the current phase
							identifier and the current player, and can be acceded with the
							'context.int' and 'context.player' registers.So, the 'card' tag of the
							test element should be to true. The specified phase name must have been
							previously defined as alias.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Au debut d'une phase. Le test attache s'applique sur la carte contenant
							cet événement. Le context contient l'identifiant de la phase et le
							joueur dont c'est le tour, et peuvent être accessibles via les registres
							'context.int' et 'context.player'.Le tag 'card' du test devrait être
							donc mis a true. Le nom de la phase doit avoir ete definie comme un
							alias.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="phase" type="idPhaseEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="end-of-phase">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Raised at the end of a phase. The attached test is applied on the card
							containing this event. The context contains only the current phase
							identifier and the current player, and can be acceded with the
							'context.int' and 'context.player' registers.So, the 'card' tag of the
							test element should be to true. The specified phase name must have been
							previously defined as alias.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							A la fin d'une phase. Le test attache s'applique sur la carte contenant
							cet événement. Le context contient l'identifiant de la phase et le
							joueur dont c'est le tour, et peuvent être accessibles via les registres
							'context.int' et 'context.player'.Le tag 'card' du test devrait être
							donc mis a true. Le nom de la phase doit avoir ete definie comme un
							alias.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="phase" type="idPhaseEnum" use="required" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="casting">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a new spell is added to the stack. The attached test is applied on
							this new spell. The context contains the card in the stack and be
							acceded with the 'context.card' register.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsqu'un nouveau sort est ajoute dans la pile. Le test attache
							s'applique sur ce sort et peut être accede via le registre
							'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" />
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="faced-up">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card is turned face up. The attached test is applied on the card
							containing this event. The context contains the card that faced up and
							be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque une carte est retournÃÂ©e face vers le haut. Le test attache
							s'applique sur la carte contenant cet événement. Le context contient la
							carte qui s'est retournée et peut être accedé via le registres
							'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="faced-down">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							When a card is turned face down. The attached test is applied on the
							card containing this event. The context contains the card that faced up
							and be acceded with the 'context.card'.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Lorsque une carte est retournÃÂ©e face vers le bas. Le test attache
							s'applique sur la carte contenant cet événement. Le context contient la
							carte qui s'est retournée et peut être accedé via le registres
							'context.card'.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element ref="test" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>

	<!-- ******************** ENUM **********************-->
	<xsd:simpleType name="idCardEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible type for a card. Must be declared within one of defined alias.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Types possibles pour une carte. Doivent être declarés dans les alias.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string" />
	</xsd:simpleType>
	<xsd:simpleType name="damageEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Damage types.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Types de degat.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string" />
	</xsd:simpleType>
	<xsd:simpleType name="operationEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Operations types.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Types d'operations.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="add" />
			<xsd:enumeration value="any" />
			<xsd:enumeration value="set" />
			<xsd:enumeration value="clear" />
			<xsd:enumeration value="reset" />
			<xsd:enumeration value="zero" />
			<xsd:enumeration value="mult" />
			<xsd:enumeration value="and-not" />
			<xsd:enumeration value="and" />
			<xsd:enumeration value="or" />
			<xsd:enumeration value="xor" />
			<xsd:enumeration value="minus" />
			<xsd:enumeration value="minimum" />
			<xsd:enumeration value="maximum" />
			<xsd:enumeration value="add-half-truncated" />
			<xsd:enumeration value="add-half-rounded" />
			<xsd:enumeration value="div-truncated" />
			<xsd:enumeration value="div-rounded" />
			<xsd:enumeration value="bit-count" />
			<xsd:enumeration value="card-colors" />
			<xsd:enumeration value="card-types" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="propertyOperationEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Operations types for property-modifier.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Types d'operations pour property-modifier.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="remove" />
			<xsd:enumeration value="add" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="operationAbilityModifierEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Insertion position of modifier.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Position d'insertion du modifier.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="add" />
			<xsd:enumeration value="remove" />
			<xsd:enumeration value="clear" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="modifierLayerEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Insertion position of modifier.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Position d'insertion du modifier.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="internal" />
			<xsd:enumeration value="normal" />
			<xsd:enumeration value="global" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="positionTopBottom">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Position of card within a zone.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Position d'une carte dans une zone.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="top" />
			<xsd:enumeration value="bottom" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="positionEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Position of card within a zone.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Position d'une carte dans une zone.</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="positionTopBottom xsd:unsignedByte" />
	</xsd:simpleType>
	<xsd:simpleType name="zoneEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Possible zones for a card.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Zones possibles pour une carte.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="play" />
			<xsd:enumeration value="playANDtapped" />
			<xsd:enumeration value="playANDuntapped" />
			<xsd:enumeration value="stack" />
			<xsd:enumeration value="hand" />
			<xsd:enumeration value="graveyard">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						Only available for some game.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						Valide uniquement pour certains jeux.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="library">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						Only available for some game.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						Valide uniquement pour certains jeux.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="side" />
			<xsd:enumeration value="phased-out" />
			<xsd:enumeration value="dbz" />
			<xsd:enumeration value="nowhere" />
			<xsd:enumeration value="anywhere" />
			<xsd:enumeration value="context" /><!-- TODO 'context' is not yet supported -->
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="modeEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible modes for 'target' action. 'opponent-choose' mode means that the opponent
				takes the hand to choose the targets. The 'context-choose' mode says that the current
				player concerned by the current event makes the choice. Warning : the mode does not
				change the current or active player.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Modes possibles pour l'action 'target'. Le mode 'opponent-choose' indique que c'est
				l'adversaire qui prend la main uniquement pour choisir la ou les cibles. Le mode
				'context-choose' indique que c'est le joueur concerne par l'enement en cours qui fait
				le choix. Attention : importe la valeur du mode, le joueur actif et le joueur
				courant ne changent pas.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="opponentchoose" />
			<xsd:enumeration value="choose" />
			<xsd:enumeration value="contextchoose" />
			<xsd:enumeration value="all" />
			<xsd:enumeration value="stack0-choose" />
			<xsd:enumeration value="target-choose" />
			<xsd:enumeration value="attachedto.controller-choose" />
			<xsd:enumeration value="testchoose" />
			<xsd:enumeration value="random" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="exportEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible declaration type for an alias. This declaration will be exported to the
				created MDB file and can be translated into any language into the '.properties'
				file.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Enumeration des exportations possibles pour une declaration d'un alias. Si cet alias
				est exporte dans le MDB, il peut être traduit dansune langue dans le fichier
				'.properties' de ce TBS.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="types" />
			<xsd:enumeration value="typesets" />
			<xsd:enumeration value="no" />
			<xsd:enumeration value="phases" />
			<xsd:enumeration value="properties" />
			<xsd:enumeration value="damage-types" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="propertyEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible properties name for a card. To each, an hexa-decimal value is attached.
				These values are considered as alias.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Nom de propriétés possibles pour une carte. A chacun de ces noms, une valeur
				hexadecimale est attachée. Ce sont l'equivalent d'alias.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:pattern value="(.)+" />
			<xsd:pattern value="0x[A-Za-z0-9]+" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="playerEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Accessible player registers name.</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Noms des registres de joueur accessibles.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="you" />
			<xsd:enumeration value="attachedto.controller" />
			<xsd:enumeration value="attachedto.owner" />
			<xsd:enumeration value="context.target" />
			<xsd:enumeration value="context.card.controller" />
			<xsd:enumeration value="context.card.owner" />
			<xsd:enumeration value="context.card2.controller" />
			<xsd:enumeration value="context.card2.owner" />
			<xsd:enumeration value="context.int" />
			<xsd:enumeration value="context.int2" />
			<xsd:enumeration value="context.player" />
			<xsd:enumeration value="controller" />
			<xsd:enumeration value="currentplayer" />
			<xsd:enumeration value="currentplayer.opponent" />
			<xsd:enumeration value="modifier.creator.controller" />
			<xsd:enumeration value="modifier.creator.owner" />
			<xsd:enumeration value="opponent" />
			<xsd:enumeration value="owner" />
			<xsd:enumeration value="saved" />
			<xsd:enumeration value="saved2" />
			<xsd:enumeration value="saved.owner" />
			<xsd:enumeration value="saved.controller" />
			<xsd:enumeration value="saved2.owner" />
			<xsd:enumeration value="saved2.controller" />
			<xsd:enumeration value="super.tested" />
			<xsd:enumeration value="target" />
			<xsd:enumeration value="target.controller" />
			<xsd:enumeration value="target.owner" />
			<xsd:enumeration value="target-list.last" />
			<xsd:enumeration value="target-list.first" />
			<xsd:enumeration value="target-list.last.controller" />
			<xsd:enumeration value="target-list.first.controller" />
			<xsd:enumeration value="target-list.last.owner" />
			<xsd:enumeration value="target-list.first.owner" />
			<xsd:enumeration value="target-list.last.attachedto.controller" />
			<xsd:enumeration value="target-list.first.attachedto.controller" />
			<xsd:enumeration value="target-list.last.attachedto.owner" />
			<xsd:enumeration value="target-list.first.attachedto.owner" />
			<xsd:enumeration value="tested" />
			<xsd:enumeration value="context" /><!-- TODO 'context' is not yet supported -->
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="cardEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Accessible card registers name.</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Noms des registres de carte accessibles.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value="this">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The card owning the test, action or ability.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La carte contrôlant le test, action ou capacité.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="tested">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">The tested card / player .</xsd:documentation>
					<xsd:documentation xml:lang="fr">La carte / joueur testé.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="attachedto" />
			<xsd:enumeration value="context.target" />
			<xsd:enumeration value="context.card" />
			<xsd:enumeration value="context.card2" />
			<xsd:enumeration value="context.card-share" />
			<xsd:enumeration value="context.event-source" />
			<xsd:enumeration value="creator" />
			<xsd:enumeration value="currentcard" />
			<xsd:enumeration value="modifier.creator" />
			<xsd:enumeration value="saved" />
			<xsd:enumeration value="saved2" />
			<xsd:enumeration value="super.tested" />
			<xsd:enumeration value="target-list.last" />
			<xsd:enumeration value="target-list.first" />
			<xsd:enumeration value="target-list.first.attachedto" />
			<xsd:enumeration value="target-list.last.attachedto" />
			<xsd:enumeration value="tested.attachedto" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="registerName">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Accessible registers name.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Noms des registres accessibles.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:token">
			<xsd:enumeration value="this" />
			<xsd:enumeration value="tested" />
			<xsd:enumeration value="you" />
			<xsd:enumeration value="game" />
			<xsd:enumeration value="game.static" />
			<xsd:enumeration value="stack" />
			<xsd:enumeration value="ability" />
			<xsd:enumeration value="required-mana" />
			<xsd:enumeration value="attachedto" />
			<xsd:enumeration value="attachedto.controller" />
			<xsd:enumeration value="attachedto.owner" />
			<xsd:enumeration value="context.target" />
			<xsd:enumeration value="context.card.controller" />
			<xsd:enumeration value="context.card.owner" />
			<xsd:enumeration value="context.card2.controller" />
			<xsd:enumeration value="context.card2.owner" />
			<xsd:enumeration value="context.int" />
			<xsd:enumeration value="context.int2" />
			<xsd:enumeration value="context.card" />
			<xsd:enumeration value="context.card2" />
			<xsd:enumeration value="context.player" />
			<xsd:enumeration value="context.card-share" />
			<xsd:enumeration value="context.event-source" />
			<xsd:enumeration value="controller" />
			<xsd:enumeration value="creator" />
			<xsd:enumeration value="currentcard" />
			<xsd:enumeration value="currentplayer" />
			<xsd:enumeration value="currentplayer.opponent" />
			<xsd:enumeration value="modifier.creator" />
			<xsd:enumeration value="modifier.creator.controller" />
			<xsd:enumeration value="modifier.creator.owner" />
			<xsd:enumeration value="opponent" />
			<xsd:enumeration value="owner" />
			<xsd:enumeration value="saved" />
			<xsd:enumeration value="saved2" />
			<xsd:enumeration value="saved.owner" />
			<xsd:enumeration value="saved.controller" />
			<xsd:enumeration value="saved2.owner" />
			<xsd:enumeration value="saved2.controller" />
			<xsd:enumeration value="super.tested" />
			<xsd:enumeration value="target" />
			<xsd:enumeration value="target.controller" />
			<xsd:enumeration value="target.owner" />
			<xsd:enumeration value="target-list.last" />
			<xsd:enumeration value="target-list.first" />
			<xsd:enumeration value="target-list.first.attachedto" />
			<xsd:enumeration value="target-list.last.attachedto" />
			<xsd:enumeration value="target-list.last.controller" />
			<xsd:enumeration value="target-list.first.controller" />
			<xsd:enumeration value="target-list.last.owner" />
			<xsd:enumeration value="target-list.first.owner" />
			<xsd:enumeration value="target-list.last.attachedto.controller" />
			<xsd:enumeration value="target-list.first.attachedto.controller" />
			<xsd:enumeration value="target-list.last.attachedto.owner" />
			<xsd:enumeration value="target-list.first.attachedto.owner" />
			<xsd:enumeration value="target" />
			<xsd:enumeration value="tested.attachedto" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="listenerRegisterName">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Registers we can listen.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Registres écoutables.</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="registerName">
			<xsd:simpleType>
				<xsd:restriction base="xsd:string">
					<xsd:enumeration value="player" />
					<xsd:enumeration value="card" />
				</xsd:restriction>
			</xsd:simpleType>
		</xsd:union>
	</xsd:simpleType>

	<xsd:simpleType name="registerValue">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible values to set to a register.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">Valeurs possibles pour un registre.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string" />
	</xsd:simpleType>

	<xsd:simpleType name="modifierRegisterIndex">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible indexes to access to values of the modifier's register.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Valeurs possible pour acceder aux valeurs du registre du modifieur.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:integer">
			<xsd:minInclusive value="0" />
			<xsd:maxInclusive value="1" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="cardRegisterIndexInt">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible indexes to access to values of the card's register.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Valeurs possible pour acceder aux valeurs du registre de la carte.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:integer">
			<xsd:minInclusive value="0" />
			<xsd:maxInclusive value="9" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="cardRegisterIndexAlias">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Aliases enumeration of registers index.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Numero d'index predefini pour les registres.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="power" />
			<xsd:enumeration value="toughness" />
			<xsd:enumeration value="loyalty" />
			<xsd:enumeration value="damage" />
			<xsd:enumeration value="state" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="cardRegisterIndex">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Aliases enumeration of registers index.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Numero d'index predefini pour les registres.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="manacolorEnum cardRegisterIndexAlias cardRegisterIndexInt" />
	</xsd:simpleType>
	<xsd:simpleType name="colorEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Possible colors of a card.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Couleurs possibles d'une carte.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="black" />
			<xsd:enumeration value="blue" />
			<xsd:enumeration value="green" />
			<xsd:enumeration value="red" />
			<xsd:enumeration value="white" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="colorLessEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Colorless mana.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Mana incolor.</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="colorless" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="manacolorEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Possible values mana colors .</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Valeurs possible pour une couleur de mana.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="colorEnum colorLessEnum" />
	</xsd:simpleType>
	<xsd:simpleType name="objectIndexes">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Aliases enumeration of registers index of game/player/card.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Numero d'index predefini pour les registres de game/player/card.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="life" />
			<xsd:enumeration value="poison" />
			<xsd:enumeration value="state" />
			<xsd:enumeration value="combat.assigned" />
			<xsd:enumeration value="combat.toassign" />
			<xsd:enumeration value="turnid" />
			<xsd:enumeration value="manapool" />
			<xsd:enumeration value="int" />
			<xsd:enumeration value="int2" />
			<xsd:enumeration value="controller" />
			<xsd:enumeration value="owner" />
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="registerIndex">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Aliases enumeration of registers index.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Numero d'index predefini pour les registres.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="manacolorEnum objectIndexes cardRegisterIndexInt xsd:string" />
	</xsd:simpleType>
	<xsd:simpleType name="resolutionEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Type of resolution of abilities. 'normal' means between the cost and the effects
				part, players have the hand. 'auto' means no player have the hand between these two
				parts but if this was an activated ability the active player gets priority just
				after the current ability has been completly resolved. 'hidden' means no player gets
				priority, is immediatly and completly resolved when added to the stack, and this
				ability would be completly hidden to the players (no picture). 'hidden_low' and
				'hidden_high' are like 'hidden' but with a different priority : they would be
				chosen after or prior to 'hidden'; 'high' mean 'normal-high'.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Types de resolution des capacités.'normal' signifie que les joueurs ont la main
				entre le cout et les effets. 'autoresolve' signifie que les joueurs n'ont pas la
				priorité entre ses 2 parties mais a la fin de la résolution de la capacité, et si
				c'etait une capacité activée, le joueur actif a la priorité comme si on se trouvait
				entre les deux parties de la capacité. 'hidden' signifie que la capacité sera
				invisible (pas d'image), et se resoudra immediatement et completement lorsqu'elle
				est ajoutée dans la pile.'hidden_low' et 'hidden_high' sont comme 'hidden' mais avec
				une priorité differente : elles seront choisit en priorité ou apres 'hidden'; 'high'
				signifie 'normal-high'.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="hidden_high" />
			<xsd:enumeration value="hidden" />
			<xsd:enumeration value="hidden_low" />
			<xsd:enumeration value="high" />
			<xsd:enumeration value="auto" />
			<xsd:enumeration value="normal" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="testOn">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">Identify a card of a player.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Identifie une carte ou un joueur.</xsd:documentation>
		</xsd:annotation>
		<xsd:union memberTypes="cardEnum playerEnum" />
	</xsd:simpleType>
	<xsd:complexType name="binaryOp">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Two test : 'X sup Y', 'X inf Y', 'X == Y', 'X != Y'. X and Y can be static integer
				values, register accesses or counters.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Deux tests : 'X sup Y', 'X inf Y', 'X == Y', 'X != Y'. X et Y peuvent être des
				valeurs entière, des acces de registre ou des compteurs. Pour ceux-ci, un test est
				attache qui permet d'incrementer le compteurs pour un résultat true d'un test sur un
				composant (joueur ou carte).
			</xsd:documentation>
		</xsd:annotation>
		<xsd:all>
			<xsd:element name="left" type="valueType" minOccurs="0" />
			<xsd:element name="right" type="valueType" minOccurs="0" />
		</xsd:all>
		<xsd:attribute name="left" type="registerValue" />
		<xsd:attribute name="right" type="registerValue" />
	</xsd:complexType>
	<xsd:complexType name="binaryTest">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Two test : 'and then', 'or else', 'xor'
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Deux tests : 'et alors', 'ou sinon', 'ou exclusif'
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:group ref="testTypeGrp" minOccurs="2" maxOccurs="unbounded" />
		</xsd:sequence>
	</xsd:complexType>

	<xsd:simpleType name="phaseList">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">A list of phase identifiers.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Une liste d'identifiants de phase</xsd:documentation>
		</xsd:annotation>
		<xsd:list itemType="idPhaseEnum" />
	</xsd:simpleType>
	<xsd:simpleType name="idPhaseEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible phase identifier. Must be declared as an alias.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Identifiants possibles pour une phase. Doivent être declarés comme un alias.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string" />
	</xsd:simpleType>

	<xsd:simpleType name="visibilityEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="you">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The zone/card visibility is changed for you, the controller of this action.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La visibilité de la zone/carte est changée pour le contrôleur de cette
						action.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="controller">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The zone/card visibility is changed for the controller of this zone/card.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La visibilité de la zone/carte est changée pour le contrôleur de cette
						zone/carte.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="opponent">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The zone/card visibility is changed for the opponent of controller of this
						action.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La visibilité de la zone/carte est changée pour l'adversaire du contrôleur
						de cette action.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="everyone">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The zone/card visibility is changed for everyone.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La visibilité de la zone/carte est changée pour tout le monde. zone/carte.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:simpleType name="optimizeEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						No optimization. Ability is always added to the TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						Aucune optimization. La capacité est toujours ajoutée à la TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="first">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is not added to the TBZ if a copy is already in the TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité n'est pas ajoutée à la TBZ si une copie est déjà dans la TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="follow">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is not added to the TBZ if a copy is already in the peak of the
						TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité n'est pas ajoutée à la TBZ si une copie est déjà au sommet de la
						TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="last">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is always added to the TBZ and replace previous copy in the TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité est toujours ajoutée à la TBZ et remplace les précédentes copies
						dans la TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="event">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is not added to the TBZ if a copy triggered by the same event is
						already in the TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité n'est pas ajoutée à la TBZ si une copie déclenchée par le même
						événement est déjà dans la TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="context">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is not added to the TBZ if a copy whith the same is already in
						the TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité n'est pas ajoutée à la TBZ si une copie avec le même context est
						déjà dans la TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="action">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is not added to the TBZ an if a copy triggered by the same
						action is already in the TBZ.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité n'est pas ajoutée à la TBZ si une copie déclenchée par la même
						action est déjà dans la TBZ.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="choice">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The ability is added to the TBZ but during the resolution a prompt will ask
						to it's controller only one ability to be added to the stack.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						La capacité est ajoutée a la TBZ mais durant la résolution un prompt
						demandera au contrôleur une seule capacité à ajouter à la pile.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="shareEnum">
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="none">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">No shared context.</xsd:documentation>
					<xsd:documentation xml:lang="fr">Aucun context partagé.</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
			<xsd:enumeration value="same-name">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">
						The context is shared with all abilities with this name.
					</xsd:documentation>
					<xsd:documentation xml:lang="fr">
						Le contexte est partagé avec toutes les capacités de même nom.
					</xsd:documentation>
				</xsd:annotation>
			</xsd:enumeration>
		</xsd:restriction>
	</xsd:simpleType>
	<xsd:simpleType name="combatEventEnum">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Possible combat events can be generated.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Evénement de combat qui peuvent être générés
			</xsd:documentation>
		</xsd:annotation>
		<xsd:restriction base="xsd:string">
			<xsd:enumeration value="declared-attacking" />
			<xsd:enumeration value="declared-blocking" />
		</xsd:restriction>
	</xsd:simpleType>

	<xsd:complexType name="valueType">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				To indicates a referenced value from any register.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Pour indiquer une valeur faisant référence à un registre.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:group ref="expressionGrp" minOccurs="0" />
		</xsd:sequence>
		<xsd:attribute name="register" type="registerName" />
		<xsd:attribute name="index" type="registerIndex" />
		<xsd:attribute name="base" type="xsd:boolean" default="false" />
	</xsd:complexType>


	<!-- *************** EXPRESSIONS ****************** -->
	<xsd:group name="expressionGrp">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">An integer expression.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Une expression entière.</xsd:documentation>
		</xsd:annotation>
		<xsd:sequence>
			<xsd:choice>
				<xsd:element name="int-list">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="list-index" type="valueType" minOccurs="0" />
							<xsd:element name="value" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="operation" use="required">
							<xsd:simpleType>
								<xsd:restriction base="xsd:string">
									<xsd:enumeration value="size" />
									<xsd:enumeration value="counter" />
									<xsd:enumeration value="index-of" />
									<xsd:enumeration value="last-index-of" />
									<xsd:enumeration value="last" />
									<xsd:enumeration value="first" />
									<xsd:enumeration value="minimum" />
									<xsd:enumeration value="maximum" />
									<xsd:enumeration value="sum" />
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
						<xsd:attribute name="value" type="registerValue" />
						<xsd:attribute name="list-index" type="registerIndex" />
					</xsd:complexType>
				</xsd:element>

				<xsd:element name="card-properties">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							Gives the intersection size of properties of two objects.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Retourne la taille de l'intersection des propriétés de deux objets.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="lower" type="valueType" minOccurs="0" />
							<xsd:element name="higher" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="operation" use="required">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									The operation applied on found properties.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									L'opération appliquée sur les propriétés trouvées.
								</xsd:documentation>
							</xsd:annotation>
							<xsd:simpleType>
								<xsd:restriction base="xsd:string">
									<xsd:enumeration value="disjonction.size">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												Return the disjonction size of found properties.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Retourne la taille de la disjonction des propriétés
												trouvées.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:enumeration>
									<xsd:enumeration value="intersection.size">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												Return the intersection size of found properties.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Retourne la taille de l'intersection des propriétés
												trouvées.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:enumeration>
									<xsd:enumeration value="union.size">
										<xsd:annotation>
											<xsd:documentation xml:lang="en">
												Return the union size of found properties.
											</xsd:documentation>
											<xsd:documentation xml:lang="fr">
												Retourne la taille de l'union des propriétés
												trouvées.
											</xsd:documentation>
										</xsd:annotation>
									</xsd:enumeration>
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
						<xsd:attribute name="card" type="testOn" use="required">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									The first object.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									Le premier objet.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="card2" type="testOn" use="required">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									The other object.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">L'autre objet.</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="lower" type="registerIndex">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									The lower property value the intersection start.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									La valeur minimale du début de l'intersection.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="higher" type="registerIndex">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									The higher property value the intersection end.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									La valeur minimale de la fin de l'intersection.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="target-list">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="list-index" type="valueType" minOccurs="0" />
							<xsd:element name="value" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="operation" use="required">
							<xsd:simpleType>
								<xsd:restriction base="xsd:string">
									<xsd:enumeration value="size" />
									<xsd:enumeration value="add" />
									<xsd:enumeration value="maximum" />
									<xsd:enumeration value="minimum" />
									<xsd:enumeration value="counter" />
									<xsd:enumeration value="index-of-saved-list" />
									<xsd:enumeration value="index-of" />
									<xsd:enumeration value="last-index-of" />
								</xsd:restriction>
							</xsd:simpleType>
						</xsd:attribute>
						<xsd:attribute name="list-index" type="registerIndex" />
						<xsd:attribute name="target" type="testOn" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="if-then-else">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="if" type="testType" />
							<xsd:element name="then" type="valueType" minOccurs="0" />
							<xsd:element name="else" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="then" type="registerIndex" />
						<xsd:attribute name="else" type="registerIndex" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="method">
					<xsd:complexType>
						<xsd:complexContent>
							<xsd:extension base="actionType">
								<xsd:sequence>
									<xsd:element name="arg0" type="valueType" minOccurs="0" />
									<xsd:element name="arg1" type="valueType" minOccurs="0" />
									<xsd:element name="arg2" type="valueType" minOccurs="0" />
								</xsd:sequence>
								<xsd:attribute name="arg0" type="registerIndex" />
								<xsd:attribute name="arg1" type="registerIndex" />
								<xsd:attribute name="arg2" type="registerIndex" />
								<xsd:attribute name="arg0-class" type="xsd:string" />
								<xsd:attribute name="arg1-class" type="xsd:string" />
								<xsd:attribute name="arg2-class" type="xsd:string" />
							</xsd:extension>
						</xsd:complexContent>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="mana-paid">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							The amount of mana paid of a given card for a given color.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							La quantité de mana payée pour une carte et une couleur données.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="color" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="color" type="manacolorEnum" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="highest-among">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="test" type="testType" />
							<xsd:element name="expression" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="restriction-zone" type="zoneEnum" />
						<xsd:attribute name="expression" type="registerValue" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="lowest-among">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="test" type="testType" />
							<xsd:element name="expression" type="valueType" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="restriction-zone" type="zoneEnum" />
						<xsd:attribute name="expression" type="registerValue" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="position">
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="and-not" type="bynaryExpression" />
				<xsd:element name="and" type="bynaryExpression" />
				<xsd:element name="or" type="bynaryExpression" />
				<xsd:element name="minus" type="bynaryExpression" />
				<xsd:element name="minimum" type="bynaryExpression" />
				<xsd:element name="maximum" type="bynaryExpression" />
				<xsd:element name="add" type="bynaryExpression" />
				<xsd:element name="mult" type="bynaryExpression" />
				<xsd:element name="div-rounded" type="bynaryExpression" />
				<xsd:element name="div-truncated" type="bynaryExpression" />
				<xsd:element name="add-half-rounded" type="unaryExpression" />
				<xsd:element name="add-half-truncated" type="unaryExpression" />
				<xsd:element name="to-index" type="unaryExpression">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To get the index corresponding to a code id. Usefull to plug an
							input-color answer to a register access.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour obtenir l'index correspondant à un code identifiant. Utile pour
							branche le résultat de input-color dans un acces de registre.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="to-code" type="unaryExpression">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To get the code id corresponding to an index.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour obtenir le code identifiant correspondant à un index.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="bit-count" type="unaryExpression">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To get the set bits count of an integer expression.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour obtenir le nombre de bits positionnés d'une expression entière.
						</xsd:documentation>
					</xsd:annotation>
				</xsd:element>
				<xsd:element name="card-colors">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">
							To get the color id code of a card (0,1,2,4,8,...), and not the color
							index. So this code may be directly used with the 'has-color' test. To
							obtain an index (0,1,2,3...) from a given id code, use 'to-index'
							expression.'to-code' expression does the reverse operation.
						</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Pour obtenir le code identifant d'une carte (0,1,2,4,8...), et non pas
							son index. Ce code peut donc être utilisé directement avec le test
							'has-color'. Pour obtenir un index à partir d'un code (0,1,2,3...)
							utiliser l'expression 'to-index'.L'expression 'to-code' fait l'opération
							inverse.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="card-types">
					<xsd:complexType>
						<xsd:sequence />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="counter" type="counterType" />
				<xsd:element name="deck-counter">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="testTypeGrp" minOccurs="0" />
						</xsd:sequence>
						<xsd:attribute name="ref" type="xsd:string" />
						<xsd:attribute name="card" type="cardEnum" />
					</xsd:complexType>
				</xsd:element>
			</xsd:choice>
		</xsd:sequence>
	</xsd:group>
	<xsd:complexType name="counterType">
		<xsd:sequence>
			<xsd:group ref="testTypeGrp" minOccurs="0" />
		</xsd:sequence>
		<xsd:attribute name="ref" type="xsd:string" />
		<xsd:attribute name="count-player" type="xsd:boolean" default="false" />
		<xsd:attribute name="restriction-zone" type="zoneEnum" />
		<xsd:attribute name="object-name" type="xsd:string" />
		<xsd:attribute name="card" type="cardEnum" />
	</xsd:complexType>
	<xsd:complexType name="bynaryExpression">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">An binary integer expression.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Une expression entière binaire.</xsd:documentation>
		</xsd:annotation>
		<xsd:all>
			<xsd:element name="left" type="valueType" minOccurs="0" />
			<xsd:element name="right" type="valueType" minOccurs="0" />
		</xsd:all>
		<xsd:attribute name="left" type="registerValue" />
		<xsd:attribute name="right" type="registerValue" />
	</xsd:complexType>
	<xsd:complexType name="isTargetType">
		<xsd:attribute name="target" default="tested" />
	</xsd:complexType>
	<xsd:complexType name="unaryExpression">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">A unary integer expression.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Une expression entière unaire.</xsd:documentation>
		</xsd:annotation>
		<xsd:all>
			<xsd:element name="value" type="valueType" minOccurs="0" />
		</xsd:all>
		<xsd:attribute name="value" type="registerValue" />
	</xsd:complexType>

	<xsd:complexType name="valuesType">
		<xsd:sequence>
			<xsd:element name="value" type="valueType" minOccurs="0">
				<xsd:annotation>
					<xsd:documentation xml:lang="en">A restricted value.</xsd:documentation>
					<xsd:documentation xml:lang="fr">Une value de restriction.</xsd:documentation>
				</xsd:annotation>
			</xsd:element>
		</xsd:sequence>
	</xsd:complexType>
	<xsd:element name="references">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				List of declared test and abilities.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Liste de tests et de capacités declarés.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:all>
				<xsd:element name="tests" minOccurs="0">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="test" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:group ref="testTypeGrp" />
									</xsd:sequence>
									<xsd:attribute name="reference-name" type="xsd:string"
										use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element name="abilities" minOccurs="0">
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="ability" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:choice>
										<xsd:element ref="triggered-ability" />
										<xsd:element ref="activated-ability" />
										<xsd:element ref="replacement-ability" />
									</xsd:choice>
									<xsd:attribute name="reference-name" type="xsd:string"
										use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
				<xsd:element ref="actions" minOccurs="0" />
				<xsd:element name="attachments" minOccurs="0">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">Available attachments.</xsd:documentation>
						<xsd:documentation xml:lang="fr">
							Attachements accessibles.
						</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:element name="attachment" minOccurs="0" maxOccurs="unbounded">
								<xsd:complexType>
									<xsd:sequence>
										<xsd:element name="modifiers" minOccurs="0">
											<xsd:annotation>
												<xsd:documentation xml:lang="en">
													Modifiers brought by this attachment.
												</xsd:documentation>
												<xsd:documentation xml:lang="fr">
													Modifiers apportés par cet attachment.
												</xsd:documentation>
											</xsd:annotation>
											<xsd:complexType>
												<xsd:group ref="modifierGrp" minOccurs="0"
													maxOccurs="unbounded" />
											</xsd:complexType>
										</xsd:element>
										<xsd:element name="valid-target" type="testType"
											minOccurs="0" maxOccurs="1" />
										<xsd:element name="valid-attachment" type="testType"
											minOccurs="0" maxOccurs="1" />
									</xsd:sequence>
									<xsd:attribute name="reference-name" type="xsd:string"
										use="required" />
								</xsd:complexType>
							</xsd:element>
						</xsd:sequence>
					</xsd:complexType>
				</xsd:element>
			</xsd:all>
			<xsd:attribute name="file" type="xsd:string" use="optional" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="aliases">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">List of alias definition.</xsd:documentation>
			<xsd:documentation xml:lang="fr">Liste de definitions d'alias.</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="alias" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">An alias definition.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Une definition d'alias.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:attribute name="name" type="xsd:string" use="required" />
						<xsd:attribute name="value" type="xsd:int" use="required" />
						<xsd:attribute name="export" type="exportEnum" default="no" />
						<xsd:attribute name="picture" type="xsd:string" />
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="file" type="xsd:string" use="optional" />
		</xsd:complexType>
	</xsd:element>
	<xsd:element name="deck-constraints">
		<xsd:annotation>
			<xsd:documentation xml:lang="en">
				Available constraints for current TBS.
			</xsd:documentation>
			<xsd:documentation xml:lang="fr">
				Contraintes disponibles pour le TBS courant.
			</xsd:documentation>
		</xsd:annotation>
		<xsd:complexType>
			<xsd:sequence>
				<xsd:element name="deck-constraint" minOccurs="0" maxOccurs="unbounded">
					<xsd:annotation>
						<xsd:documentation xml:lang="en">A constraint.</xsd:documentation>
						<xsd:documentation xml:lang="fr">Une contrainte.</xsd:documentation>
					</xsd:annotation>
					<xsd:complexType>
						<xsd:sequence>
							<xsd:group ref="testTypeGrp" minOccurs="0" maxOccurs="unbounded" />
						</xsd:sequence>
						<xsd:attribute name="extends" type="xsd:string" use="optional">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									Constraint name extension.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									Nom de la contrainte étendue.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
						<xsd:attribute name="name" type="xsd:string" use="required">
							<xsd:annotation>
								<xsd:documentation xml:lang="en">
									Constraint name.
								</xsd:documentation>
								<xsd:documentation xml:lang="fr">
									Nom de la contrainte.
								</xsd:documentation>
							</xsd:annotation>
						</xsd:attribute>
					</xsd:complexType>
				</xsd:element>
			</xsd:sequence>
			<xsd:attribute name="file" type="xsd:string" use="optional" />
			<xsd:attribute name="deckbuilder-min-property" type="xsd:string" default="0" use="optional"/>
			<xsd:attribute name="deckbuilder-max-property" type="xsd:string" default="65535" use="optional" />
			<xsd:attribute name="master" type="xsd:string" default="0" use="optional"/>
		</xsd:complexType>
	</xsd:element>
</xsd:schema>
